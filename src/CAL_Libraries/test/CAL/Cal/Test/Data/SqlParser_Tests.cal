/*
 * Copyright (c) 2007 BUSINESS OBJECTS SOFTWARE LIMITED
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *  
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *  
 *     * Neither the name of Business Objects nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *  
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */


/*
 * SqlParser_Tests.cal
 * Created: June 2005
 * By: Greg McClement.
 */

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
module Cal.Test.Data.SqlParser_Tests;

import Cal.Core.Prelude using
    // Standard Prelude import preamble
    typeConstructor = Int, Double, String, Boolean, Char, Integer, JObject, JList, Maybe, Ordering;
    dataConstructor = False, True, LT, EQ, GT, Nothing, Just;
    typeClass = Eq, Ord, Num, Inputable, Outputable;
    function = 
        append, compare, concat, const, doubleToString, equals, error, fromJust, fst, input,
        intToString, isNothing, isEmpty,  max, mod, not, output, round, seq, snd, toDouble,
        field1, field2, field3, upFrom, upFromTo;
    
    // Local dependencies not in standard preamble
    function = fromMaybe, maybeToList, pair, stringToInt, truncate, uncurry;
    ;
import Cal.Collections.List using  
    function = all, chop, filter, foldLeft, foldLeftStrict, foldRight, head, intersperse,
        last, length, list2, map, outputList, reverse, subscript, sum, tail, take,
        zip, zip3, zipWith;  
    function = isElem, lookup, concatMap, find, isSingletonList, removeDuplicates, sort;
    ;      
import Cal.Core.String using  
    function = toList;
    function = fromList, normalizeWhitespace;
    ;        

import Cal.Data.Sql using
    typeConstructor = DbFunction, Expr, JoinInfo, JoinNode, Query, QueryTable, TypedExpr;
    function = notExpr, toTypedExpr, toUntypedExpr;
    ;

import Cal.Data.SqlBuilder;

import Cal.Utilities.Time using
    typeConstructor = Time;
    ;

import Cal.Data.SqlParser using
    function = parseExpression, parseSelectStatement;
    ;

import Cal.Core.Debug using
    function = show, trace;
    ;
//testSql sql = 
//    let
//        query = parseSelectStatement sql;
//    in
//        Sql.queryText SqlBuilder.defaultSqlBuilder True query;

/*
 * The original parser did not have a test suite. I wrote one. The goal was to
 * port the original parser and not fix bug in it. So all the commented out
 * queries are ones that I got from running the question panel. The do not work
 * in this parser or the original one so I did not fix that.
 */
    
testSuiteSql_tests =
    [
     "SELECT [T].[F1], COUNT([T].[F2]) FROM [T] WHERE [T].[F3] = 23 GROUP BY [T].[F1], [T].[F2] ORDER BY [T].[F1] ASC",
     "SELECT [T].[F1], COUNT([T].[F2]) FROM [T] WHERE NOT ([T].[F3] = 23) GROUP BY [T].[F1], [T].[F2] ORDER BY [T].[F1] ASC",
     "SELECT [ATABLE].[F1] AS [R1], COUNT([ATABLE].[F2]) AS [R2] FROM [T] AS [ATABLE] WHERE [ATABLE].[F3] = 23 GROUP BY [ATABLE].[F1], [ATABLE].[F2] ORDER BY [ATABLE].[F1] ASC",
     "SELECT [Q1].[Stores] AS [Stores], [Q1].[COL_VALUE3] AS [Units Ordered (last year)], [Q1].[COL_VALUE2] AS [Units Ordered (current full year)] FROM [Q1]" 
     
     // Feel free to uncomment the following test cases.  However, please
     // update the test cases to quote the identifiers properly.
     
//     "SELECT [T1].[F1], [T1].[F2] FROM (SELECT [L1].[F1], [L1].[F2] FROM [L1]) AS [T1]"
//     "SELECT Q1.Stores AS Stores, Q1.COL_VALUE3 AS [Units Ordered (last year)],
// Q1.COL_VALUE2 AS [Units Ordered (current full year)] FROM ( SELECT L.T1, L.T2
// FROM L ) AS Q1"
//  "SELECT Q1.Stores AS Stores, Q.COL_VALUE2 AS [Units Ordered (last year)],
// Q1.COL_VALUE3 AS [Units Ordered (current full year)], CASE WHEN Q1.COL_VALUE3
// = 0.0 AND Q.COL_VALUE2 = 0.0 THEN 0.0 ELSE (Q1.COL_VALUE3 - Q.COL_VALUE2) /
// NULLIF(ABS(Q.COL_VALUE2), 0.0) * 100.0 END AS [% change] FROM ( SELECT
// store.store_id AS [Stores (key)], store.store_name AS Stores,
// SUM(inventory_fact_1998.units_ordered) AS COL_VALUE3 FROM
// ((inventory_fact_1998 INNER JOIN product ON inventory_fact_1998.product_id =
// product.product_id) INNER JOIN store ON inventory_fact_1998.store_id =
// store.store_id) INNER JOIN time_by_day ON inventory_fact_1998.time_id =
// time_by_day.time_id WHERE product.gross_weight >= 20.0 AND
// time_by_day.the_date + 2292.0 >= {ts '2005-01-01 00:00:00.0'} AND
// time_by_day.the_date + 2292.0 < {ts '2006-01-01 00:00:00.0'} AND
// store.store_manager IN ('Byrd', 'Cobb', 'Davis', 'Jones', 'Johnson') GROUP BY
// store.store_id, store.store_name HAVING
// SUM(inventory_fact_1998.units_ordered) IS NOT NULL ) AS Q1 INNER JOIN (
// SELECT store.store_id AS COL_VALUE1, SUM(inventory_fact_1998.units_ordered)
// AS COL_VALUE2 FROM ((inventory_fact_1998 INNER JOIN product ON
// inventory_fact_1998.product_id = product.product_id) INNER JOIN store ON
// inventory_fact_1998.store_id = store.store_id) INNER JOIN time_by_day ON
// inventory_fact_1998.time_id = time_by_day.time_id WHERE product.gross_weight
// >= 20.0 AND time_by_day.the_date + 2292.0 >= {ts '2004-01-01 00:00:00.0'} AND
// time_by_day.the_date + 2292.0 < {ts '2005-01-01 00:00:00.0'} AND
// store.store_manager IN ('Byrd', 'Cobb', 'Davis', 'Jones', 'Johnson') GROUP BY
// store.store_id HAVING SUM(inventory_fact_1998.units_ordered) IS NOT NULL ) AS
// Q ON Q1.[Stores (key)] = Q.COL_VALUE1 WHERE Q.COL_VALUE2 = 0.0 AND
// Q1.COL_VALUE3 = 0.0 OR Q1.COL_VALUE3 > Q.COL_VALUE2 - 25.0 / 100.0 *
// ABS(Q.COL_VALUE2) AND Q1.COL_VALUE3 < 25.0 / 100.0 * ABS(Q.COL_VALUE2) +
// Q.COL_VALUE2 ORDER BY CASE WHEN Q1.COL_VALUE3 = 0.0 AND Q.COL_VALUE2 = 0.0
// THEN 0.0 ELSE (Q1.COL_VALUE3 - Q.COL_VALUE2) / NULLIF(ABS(Q.COL_VALUE2), 0.0)
// * 100.0 END DESC, Q1.COL_VALUE3 DESC, Q1.Stores ASC",
//    "SELECT Q.Stores AS Stores, Q.COL_VALUE3 AS [Units Ordered (last year)],
// Q1.COL_VALUE2 AS [Units Ordered (current full year)], CASE WHEN Q1.COL_VALUE2
// = 0.0 AND Q.COL_VALUE3 = 0.0 THEN 0.0 ELSE (Q.COL_VALUE3 - Q1.COL_VALUE2) /
// NULLIF(ABS(Q.COL_VALUE3), 0.0) * 100.0 END AS [% decrease] FROM ( (SELECT
// store.store_id AS [Stores (key)], store.store_name AS Stores,
// SUM(inventory_fact_1998.units_ordered) AS COL_VALUE3 FROM
// ((inventory_fact_1998 INNER JOIN product ON inventory_fact_1998.product_id =
// product.product_id) INNER JOIN store ON inventory_fact_1998.store_id =
// store.store_id) INNER JOIN time_by_day ON inventory_fact_1998.time_id =
// time_by_day.time_id WHERE product.gross_weight >= 20.0 AND
// time_by_day.the_date + 2292.0 >= {ts '2004-01-01 00:00:00.0'} AND
// time_by_day.the_date + 2292.0 < {ts '2005-01-01 00:00:00.0'} AND
// store.store_manager IN ('Byrd', 'Cobb', 'Davis', 'Jones', 'Johnson') GROUP BY
// store.store_id, store.store_name HAVING
// SUM(inventory_fact_1998.units_ordered) IS NOT NULL ) AS Q INNER JOIN (
// (SELECT store.store_id AS COL_VALUE1, SUM(inventory_fact_1998.units_ordered)
// AS COL_VALUE2 FROM ((inventory_fact_1998 INNER JOIN product ON
// inventory_fact_1998.product_id = product.product_id) INNER JOIN store ON
// inventory_fact_1998.store_id = store.store_id) INNER JOIN time_by_day ON
// inventory_fact_1998.time_id = time_by_day.time_id WHERE product.gross_weight
// >= 20.0 AND time_by_day.the_date + 2292.0 >= {ts '2005-01-01 00:00:00.0'} AND
// time_by_day.the_date + 2292.0 < {ts '2006-01-01 00:00:00.0'} AND
// store.store_manager IN ('Byrd', 'Cobb', 'Davis', 'Jones', 'Johnson') GROUP BY
// store.store_id HAVING SUM(inventory_fact_1998.units_ordered) IS NOT NULL ) AS
// Q1 ON Q.[Stores (key)] = Q1.COL_VALUE1 WHERE NOT (Q.COL_VALUE3 = 0.0 AND
// Q1.COL_VALUE2 = 0.0) AND Q1.COL_VALUE2 <= Q.COL_VALUE3 - 5.0 / 100.0 *
// ABS(Q.COL_VALUE3) ORDER BY CASE WHEN Q1.COL_VALUE2 = 0.0 AND Q.COL_VALUE3 =
// 0.0 THEN 0.0 ELSE (Q.COL_VALUE3 - Q1.COL_VALUE2) / NULLIF(ABS(Q.COL_VALUE3),
// 0.0) * 100.0 END DESC, Q.COL_VALUE3 DESC, Q.Stores ASC",
//
//    "SELECT Q1.Stores AS Stores, Q.COL_VALUE2 AS [Units Ordered (last year)],
// Q1.COL_VALUE3 AS [Units Ordered (current full year)], CASE WHEN Q1.COL_VALUE3
// = 0.0 AND Q.COL_VALUE2 = 0.0 THEN 0.0 ELSE (Q1.COL_VALUE3 - Q.COL_VALUE2) /
// NULLIF(ABS(Q.COL_VALUE2), 0.0) * 100.0 END AS [% increase] FROM ( (SELECT
// store.store_id AS [Stores (key)], store.store_name AS Stores,
// SUM(inventory_fact_1998.units_ordered) AS COL_VALUE3 FROM
// ((inventory_fact_1998 INNER JOIN product ON inventory_fact_1998.product_id =
// product.product_id) INNER JOIN store ON inventory_fact_1998.store_id =
// store.store_id) INNER JOIN time_by_day ON inventory_fact_1998.time_id =
// time_by_day.time_id WHERE product.gross_weight >= 20.0 AND
// time_by_day.the_date + 2292.0 >= {ts '2005-01-01 00:00:00.0'} AND
// time_by_day.the_date + 2292.0 < {ts '2006-01-01 00:00:00.0'} AND
// store.store_manager IN ('Byrd', 'Cobb', 'Davis', 'Jones', 'Johnson') GROUP BY
// store.store_id, store.store_name HAVING
// SUM(inventory_fact_1998.units_ordered) IS NOT NULL ) AS Q1 LEFT OUTER JOIN (
// (SELECT store.store_id AS COL_VALUE1, SUM(inventory_fact_1998.units_ordered)
// AS COL_VALUE2 FROM ((inventory_fact_1998 INNER JOIN product ON
// inventory_fact_1998.product_id = product.product_id) INNER JOIN store ON
// inventory_fact_1998.store_id = store.store_id) INNER JOIN time_by_day ON
// inventory_fact_1998.time_id = time_by_day.time_id WHERE product.gross_weight
// >= 20.0 AND time_by_day.the_date + 2292.0 >= {ts '2004-01-01 00:00:00.0'} AND
// time_by_day.the_date + 2292.0 < {ts '2005-01-01 00:00:00.0'} AND
// store.store_manager IN ('Byrd', 'Cobb', 'Davis', 'Jones', 'Johnson') GROUP BY
// store.store_id HAVING SUM(inventory_fact_1998.units_ordered) IS NOT NULL ) AS
// Q ON Q1.[Stores (key)] = Q.COL_VALUE1 WHERE Q.COL_VALUE2 IS NULL OR NOT
// (Q.COL_VALUE2 = 0.0 AND Q1.COL_VALUE3 = 0.0) AND Q1.COL_VALUE3 >= 5.0 / 100.0
// * ABS(Q.COL_VALUE2) + Q.COL_VALUE2 ORDER BY CASE WHEN Q1.COL_VALUE3 = 0.0 AND
// Q.COL_VALUE2 = 0.0 THEN 0.0 ELSE (Q1.COL_VALUE3 - Q.COL_VALUE2) /
// NULLIF(ABS(Q.COL_VALUE2), 0.0) * 100.0 END DESC, Q1.COL_VALUE3 DESC,
// Q1.Stores ASC",
//
//    "SELECT Q1.Stores AS Stores, Q.COL_VALUE2 AS [Units Ordered (last year)],
// Q1.COL_VALUE3 AS [Units Ordered (current full year)], CASE WHEN Q1.COL_VALUE3
// = 0.0 AND Q.COL_VALUE2 = 0.0 THEN 0.0 ELSE (Q1.COL_VALUE3 - Q.COL_VALUE2) /
// NULLIF(ABS(Q.COL_VALUE2), 0.0) * 100.0 END AS [% increase] FROM ( (SELECT
// store.store_id AS [Stores (key)], store.store_name AS Stores,
// SUM(inventory_fact_1998.units_ordered) AS COL_VALUE3 FROM
// ((inventory_fact_1998 INNER JOIN product ON inventory_fact_1998.product_id =
// product.product_id) INNER JOIN store ON inventory_fact_1998.store_id =
// store.store_id) INNER JOIN time_by_day ON inventory_fact_1998.time_id =
// time_by_day.time_id WHERE product.gross_weight >= 20.0 AND
// time_by_day.the_date + 2292.0 >= {ts '2005-01-01 00:00:00.0'} AND
// time_by_day.the_date + 2292.0 < {ts '2006-01-01 00:00:00.0'} AND
// store.store_manager IN ('Byrd', 'Cobb', 'Davis', 'Jones', 'Johnson') GROUP BY
// store.store_id, store.store_name HAVING
// SUM(inventory_fact_1998.units_ordered) IS NOT NULL ) AS Q1 INNER JOIN (
// (SELECT store.store_id AS COL_VALUE1, SUM(inventory_fact_1998.units_ordered)
// AS COL_VALUE2 FROM ((inventory_fact_1998 INNER JOIN product ON
// inventory_fact_1998.product_id = product.product_id) INNER JOIN store ON
// inventory_fact_1998.store_id = store.store_id) INNER JOIN time_by_day ON
// inventory_fact_1998.time_id = time_by_day.time_id WHERE product.gross_weight
// >= 20.0 AND time_by_day.the_date + 2292.0 >= {ts '2004-01-01 00:00:00.0'} AND
// time_by_day.the_date + 2292.0 < {ts '2005-01-01 00:00:00.0'} AND
// store.store_manager IN ('Byrd', 'Cobb', 'Davis', 'Jones', 'Johnson') GROUP BY
// store.store_id HAVING SUM(inventory_fact_1998.units_ordered) IS NOT NULL ) AS
// Q ON Q1.[Stores (key)] = Q.COL_VALUE1 WHERE NOT (Q.COL_VALUE2 = 0.0 AND
// Q1.COL_VALUE3 = 0.0) AND Q1.COL_VALUE3 >= 5.0 / 100.0 * ABS(Q.COL_VALUE2) +
// Q.COL_VALUE2 ORDER BY CASE WHEN Q1.COL_VALUE3 = 0.0 AND Q.COL_VALUE2 = 0.0
// THEN 0.0 ELSE (Q1.COL_VALUE3 - Q.COL_VALUE2) / NULLIF(ABS(Q.COL_VALUE2), 0.0)
// * 100.0 END DESC, Q1.COL_VALUE3 DESC, Q1.Stores ASC",
//
//    "SELECT Q1.Stores AS Stores, Q1.COL_VALUE3 AS [Units Ordered], Q1.COL_VALUE4
// AS [Average of Units Ordered], CASE WHEN Q1.COL_VALUE3 = 0.0 AND
// Q1.COL_VALUE4 = 0.0 THEN 0.0 ELSE (Q1.COL_VALUE3 - Q1.COL_VALUE4) /
// NULLIF(ABS(Q1.COL_VALUE4), 0.0) * 100.0 END AS [% above average] FROM (
// (SELECT store.store_id AS [Stores (key)], store.store_name AS Stores,
// SUM(inventory_fact_1998.units_ordered) AS COL_VALUE3, ( (SELECT
// AVG(Q.COL_VALUE1) FROM ( (SELECT SUM(inventory_fact_1998.units_ordered) AS
// COL_VALUE1 FROM ((inventory_fact_1998 INNER JOIN product ON
// inventory_fact_1998.product_id = product.product_id) INNER JOIN store ON
// inventory_fact_1998.store_id = store.store_id) INNER JOIN time_by_day ON
// inventory_fact_1998.time_id = time_by_day.time_id WHERE product.gross_weight
// >= 20.0 AND time_by_day.the_date + 2292.0 >= {ts '2005-04-01 00:00:00.0'} AND
// time_by_day.the_date + 2292.0 <= {ts '2005-06-01 14:51:54.623'} GROUP BY
// store.store_id ) AS Q ) AS COL_VALUE4 FROM ((inventory_fact_1998 INNER JOIN
// product ON inventory_fact_1998.product_id = product.product_id) INNER JOIN
// store ON inventory_fact_1998.store_id = store.store_id) INNER JOIN
// time_by_day ON inventory_fact_1998.time_id = time_by_day.time_id WHERE
// product.gross_weight >= 20.0 AND time_by_day.the_date + 2292.0 >= {ts
// '2005-04-01 00:00:00.0'} AND time_by_day.the_date + 2292.0 <= {ts '2005-06-01
// 14:51:54.623'} GROUP BY store.store_id, store.store_name HAVING
// SUM(inventory_fact_1998.units_ordered) IS NOT NULL ) AS Q1 WHERE
// Q1.COL_VALUE4 = 0.0 AND Q1.COL_VALUE3 = 0.0 OR Q1.COL_VALUE3 > Q1.COL_VALUE4
// - 10.0 / 100.0 * ABS(Q1.COL_VALUE4) AND Q1.COL_VALUE3 < 10.0 / 100.0 *
// ABS(Q1.COL_VALUE4) + Q1.COL_VALUE4 ORDER BY Q1.COL_VALUE3 DESC, Q1.Stores
// ASC",
//
//    "SELECT Q1.Stores AS Stores, Q1.COL_VALUE3 AS [Units Ordered], Q1.COL_VALUE4
// AS [Average of Units Ordered], CASE WHEN Q1.COL_VALUE3 = 0.0 AND
// Q1.COL_VALUE4 = 0.0 THEN 0.0 ELSE (Q1.COL_VALUE4 - Q1.COL_VALUE3) /
// NULLIF(ABS(Q1.COL_VALUE4), 0.0) * 100.0 END AS [% below average] FROM (
// (SELECT store.store_id AS [Stores (key)], store.store_name AS Stores,
// SUM(inventory_fact_1998.units_ordered) AS COL_VALUE3, ( (SELECT
// AVG(Q.COL_VALUE1) FROM ( (SELECT SUM(inventory_fact_1998.units_ordered) AS
// COL_VALUE1 FROM ((inventory_fact_1998 INNER JOIN product ON
// inventory_fact_1998.product_id = product.product_id) INNER JOIN store ON
// inventory_fact_1998.store_id = store.store_id) INNER JOIN time_by_day ON
// inventory_fact_1998.time_id = time_by_day.time_id WHERE product.gross_weight
// >= 20.0 AND time_by_day.the_date + 2292.0 >= {ts '2005-04-01 00:00:00.0'} AND
// time_by_day.the_date + 2292.0 <= {ts '2005-06-01 14:52:17.857'} GROUP BY
// store.store_id ) AS Q ) AS COL_VALUE4 FROM ((inventory_fact_1998 INNER JOIN
// product ON inventory_fact_1998.product_id = product.product_id) INNER JOIN
// store ON inventory_fact_1998.store_id = store.store_id) INNER JOIN
// time_by_day ON inventory_fact_1998.time_id = time_by_day.time_id WHERE
// product.gross_weight >= 20.0 AND time_by_day.the_date + 2292.0 >= {ts
// '2005-04-01 00:00:00.0'} AND time_by_day.the_date + 2292.0 <= {ts '2005-06-01
// 14:52:17.857'} GROUP BY store.store_id, store.store_name HAVING
// SUM(inventory_fact_1998.units_ordered) IS NOT NULL ) AS Q1 WHERE NOT
// (Q1.COL_VALUE4 = 0.0 AND Q1.COL_VALUE3 = 0.0) AND Q1.COL_VALUE3 <=
// Q1.COL_VALUE4 - 10.0 / 100.0 * ABS(Q1.COL_VALUE4) ORDER BY Q1.COL_VALUE3 ASC,
// Q1.Stores ASC",
//
//    "SELECT Q1.Stores AS Stores, Q1.COL_VALUE3 AS [Units Ordered], Q1.COL_VALUE4
// AS [Average of Units Ordered], CASE WHEN Q1.COL_VALUE3 = 0.0 AND
// Q1.COL_VALUE4 = 0.0 THEN 0.0 ELSE (Q1.COL_VALUE3 - Q1.COL_VALUE4) /
// NULLIF(ABS(Q1.COL_VALUE4), 0.0) * 100.0 END AS [% above average] FROM (
// (SELECT store.store_id AS [Stores (key)], store.store_name AS Stores,
// SUM(inventory_fact_1998.units_ordered) AS COL_VALUE3, ( (SELECT
// AVG(Q.COL_VALUE1) FROM ( (SELECT SUM(inventory_fact_1998.units_ordered) AS
// COL_VALUE1 FROM ((inventory_fact_1998 INNER JOIN product ON
// inventory_fact_1998.product_id = product.product_id) INNER JOIN store ON
// inventory_fact_1998.store_id = store.store_id) INNER JOIN time_by_day ON
// inventory_fact_1998.time_id = time_by_day.time_id WHERE product.gross_weight
// >= 20.0 AND time_by_day.the_date + 2292.0 >= {ts '2005-04-01 00:00:00.0'} AND
// time_by_day.the_date + 2292.0 <= {ts '2005-06-01 14:52:40.231'} GROUP BY
// store.store_id ) AS Q ) AS COL_VALUE4 FROM ((inventory_fact_1998 INNER JOIN
// product ON inventory_fact_1998.product_id = product.product_id) INNER JOIN
// store ON inventory_fact_1998.store_id = store.store_id) INNER JOIN
// time_by_day ON inventory_fact_1998.time_id = time_by_day.time_id WHERE
// product.gross_weight >= 20.0 AND time_by_day.the_date + 2292.0 >= {ts
// '2005-04-01 00:00:00.0'} AND time_by_day.the_date + 2292.0 <= {ts '2005-06-01
// 14:52:40.231'} GROUP BY store.store_id, store.store_name HAVING
// SUM(inventory_fact_1998.units_ordered) IS NOT NULL ) AS Q1 WHERE NOT
// (Q1.COL_VALUE4 = 0.0 AND Q1.COL_VALUE3 = 0.0) AND Q1.COL_VALUE3 >= 10.0 /
// 100.0 * ABS(Q1.COL_VALUE4) + Q1.COL_VALUE4 ORDER BY Q1.COL_VALUE3 DESC,
// Q1.Stores ASC",
//
//    "SELECT store.store_name AS Stores, SUM(inventory_fact_1998.units_ordered) AS
// [Units Ordered] FROM (inventory_fact_1998 INNER JOIN product ON
// inventory_fact_1998.product_id = product.product_id) INNER JOIN store ON
// inventory_fact_1998.store_id = store.store_id WHERE product.gross_weight >=
// 20.0 GROUP BY store.store_id, store.store_name HAVING
// SUM(inventory_fact_1998.units_ordered) IS NOT NULL AND
// SUM(inventory_fact_1998.units_ordered) > 5000.0 AND
// SUM(inventory_fact_1998.units_ordered) < 15000.0 ORDER BY
// SUM(inventory_fact_1998.units_ordered) ASC, store.store_name ASC",
//
//    "SELECT store.store_name AS Stores, SUM(inventory_fact_1998.units_ordered) AS
// [Units Ordered] FROM (inventory_fact_1998 INNER JOIN product ON
// inventory_fact_1998.product_id = product.product_id) INNER JOIN store ON
// inventory_fact_1998.store_id = store.store_id WHERE product.gross_weight >=
// 20.0 GROUP BY store.store_id, store.store_name HAVING
// SUM(inventory_fact_1998.units_ordered) IS NOT NULL AND
// SUM(inventory_fact_1998.units_ordered) <= 10000.0 ORDER BY
// SUM(inventory_fact_1998.units_ordered) ASC, store.store_name ASC",
//
//    "SELECT store.store_name AS Stores, SUM(inventory_fact_1998.units_ordered) AS
// [Units Ordered] FROM (inventory_fact_1998 INNER JOIN product ON
// inventory_fact_1998.product_id = product.product_id) INNER JOIN store ON
// inventory_fact_1998.store_id = store.store_id WHERE product.gross_weight >=
// 20.0 GROUP BY store.store_id, store.store_name HAVING
// SUM(inventory_fact_1998.units_ordered) IS NOT NULL AND
// SUM(inventory_fact_1998.units_ordered) >= 10000.0 ORDER BY
// SUM(inventory_fact_1998.units_ordered) DESC, store.store_name ASC",
//
//    "SELECT TOP 20 PERCENT store.store_name AS Stores,
// SUM(inventory_fact_1998.units_shipped) AS [Units Shipped] FROM
// (inventory_fact_1998 INNER JOIN product ON inventory_fact_1998.product_id =
// product.product_id) INNER JOIN store ON inventory_fact_1998.store_id =
// store.store_id WHERE product.gross_weight >= 20.0 GROUP BY store.store_id,
// store.store_name HAVING SUM(inventory_fact_1998.units_shipped) IS NOT NULL
// ORDER BY SUM(inventory_fact_1998.units_shipped) ASC, store.store_name ASC",
//
//    "SELECT TOP 30 PERCENT store.store_name AS Stores,
// SUM(inventory_fact_1998.units_ordered) AS [Units Ordered] FROM
// (inventory_fact_1998 INNER JOIN product ON inventory_fact_1998.product_id =
// product.product_id) INNER JOIN store ON inventory_fact_1998.store_id =
// store.store_id WHERE product.gross_weight >= 20.0 GROUP BY store.store_id,
// store.store_name HAVING SUM(inventory_fact_1998.units_ordered) IS NOT NULL
// ORDER BY SUM(inventory_fact_1998.units_ordered) DESC, store.store_name ASC",
//
//    "SELECT TOP 4 store.store_name AS Stores,
// SUM(inventory_fact_1998.units_shipped) AS [Units Shipped] FROM
// (inventory_fact_1998 INNER JOIN product ON inventory_fact_1998.product_id =
// product.product_id) INNER JOIN store ON inventory_fact_1998.store_id =
// store.store_id WHERE product.gross_weight >= 20.0 GROUP BY store.store_id,
// store.store_name HAVING SUM(inventory_fact_1998.units_shipped) IS NOT NULL
// ORDER BY SUM(inventory_fact_1998.units_shipped) ASC, store.store_name ASC",
//
//    "SELECT TOP 3 store.store_name AS Stores,
// SUM(inventory_fact_1998.units_ordered) AS [Units Ordered] FROM
// (inventory_fact_1998 INNER JOIN product ON inventory_fact_1998.product_id =
// product.product_id) INNER JOIN store ON inventory_fact_1998.store_id =
// store.store_id WHERE product.gross_weight >= 20.0 GROUP BY store.store_id,
// store.store_name HAVING SUM(inventory_fact_1998.units_ordered) IS NOT NULL
// ORDER BY SUM(inventory_fact_1998.units_ordered) DESC, store.store_name ASC",
//
//    "SELECT Q.Stores AS Stores FROM ( SELECT store.store_id AS [Stores (key)],
// store.store_name AS Stores FROM ((inventory_fact_1998 INNER JOIN product ON
// inventory_fact_1998.product_id = product.product_id) INNER JOIN store ON
// inventory_fact_1998.store_id = store.store_id) INNER JOIN time_by_day ON
// inventory_fact_1998.time_id = time_by_day.time_id WHERE product.gross_weight
// >= 20.0 AND time_by_day.the_date + 2292.0 >= {ts '2005-04-01 00:00:00.0'} AND
// time_by_day.the_date + 2292.0 <= {ts '2005-06-01 14:54:33.760'} GROUP BY
// store.store_id, store.store_name HAVING
// SUM(inventory_fact_1998.units_shipped) IS NOT NULL ) AS Q INNER JOIN (
// (SELECT store.store_id AS COL_VALUE1 FROM ((inventory_fact_1998 INNER JOIN
// product ON inventory_fact_1998.product_id = product.product_id) INNER JOIN
// store ON inventory_fact_1998.store_id = store.store_id) INNER JOIN
// time_by_day ON inventory_fact_1998.time_id = time_by_day.time_id WHERE
// product.gross_weight >= 20.0 AND time_by_day.the_date + 2292.0 >= {ts
// '2005-01-01 00:00:00.0'} AND time_by_day.the_date + 2292.0 < {ts '2005-04-01
// 00:00:00.0'} GROUP BY store.store_id HAVING
// SUM(inventory_fact_1998.units_shipped) IS NOT NULL ) AS Q1 ON Q.[Stores
// (key)] = Q1.COL_VALUE1 ORDER BY Q.Stores ASC",
//
//    "SELECT store.store_name AS Stores FROM ((inventory_fact_1998 INNER JOIN
// product ON inventory_fact_1998.product_id = product.product_id) INNER JOIN
// store ON inventory_fact_1998.store_id = store.store_id) INNER JOIN
// time_by_day ON inventory_fact_1998.time_id = time_by_day.time_id WHERE
// product.gross_weight >= 20.0 AND time_by_day.the_date + 2292.0 >= {ts
// '2005-01-01 00:00:00.0'} AND time_by_day.the_date + 2292.0 < {ts '2005-04-01
// 00:00:00.0'} AND NOT (store.store_id IN ( (SELECT store.store_id FROM
// ((inventory_fact_1998 INNER JOIN product ON inventory_fact_1998.product_id =
// product.product_id) INNER JOIN store ON inventory_fact_1998.store_id =
// store.store_id) INNER JOIN time_by_day ON inventory_fact_1998.time_id =
// time_by_day.time_id WHERE product.gross_weight >= 20.0 AND
// time_by_day.the_date + 2292.0 >= {ts '2005-04-01 00:00:00.0'} AND
// time_by_day.the_date + 2292.0 <= {ts '2005-06-01 14:54:49.682'} GROUP BY
// store.store_id HAVING SUM(inventory_fact_1998.units_shipped) IS NOT NULL ))
// GROUP BY store.store_id, store.store_name HAVING
// SUM(inventory_fact_1998.units_shipped) IS NOT NULL ORDER BY store.store_name
// ASC",
//
//    "SELECT store.store_name AS Stores FROM ((inventory_fact_1998 INNER JOIN
// product ON inventory_fact_1998.product_id = product.product_id) INNER JOIN
// store ON inventory_fact_1998.store_id = store.store_id) INNER JOIN
// time_by_day ON inventory_fact_1998.time_id = time_by_day.time_id WHERE
// product.gross_weight >= 20.0 AND time_by_day.the_date + 2292.0 >= {ts
// '2005-04-01 00:00:00.0'} AND time_by_day.the_date + 2292.0 <= {ts '2005-06-01
// 14:55:03.713'} AND NOT (store.store_id IN ( (SELECT store.store_id FROM
// ((inventory_fact_1998 INNER JOIN product ON inventory_fact_1998.product_id =
// product.product_id) INNER JOIN store ON inventory_fact_1998.store_id =
// store.store_id) INNER JOIN time_by_day ON inventory_fact_1998.time_id =
// time_by_day.time_id WHERE product.gross_weight >= 20.0 AND
// time_by_day.the_date + 2292.0 >= {ts '2005-01-01 00:00:00.0'} AND
// time_by_day.the_date + 2292.0 < {ts '2005-04-01 00:00:00.0'} GROUP BY
// store.store_id HAVING SUM(inventory_fact_1998.units_shipped) IS NOT NULL ))
// GROUP BY store.store_id, store.store_name HAVING
// SUM(inventory_fact_1998.units_shipped) IS NOT NULL ORDER BY store.store_name
// ASC",
//
//    "SELECT store.store_name AS Stores FROM ((inventory_fact_1998 INNER JOIN
// product ON inventory_fact_1998.product_id = product.product_id) INNER JOIN
// store ON inventory_fact_1998.store_id = store.store_id) INNER JOIN
// time_by_day ON inventory_fact_1998.time_id = time_by_day.time_id WHERE
// product.gross_weight >= 20.0 AND time_by_day.the_date + 2292.0 >= {ts
// '2005-01-01 00:00:00.0'} AND time_by_day.the_date + 2292.0 <= {ts '2005-06-01
// 14:55:34.119'} AND store.store_id IN ( (SELECT store.store_id FROM
// ((inventory_fact_1998 INNER JOIN product ON inventory_fact_1998.product_id =
// product.product_id) INNER JOIN store ON inventory_fact_1998.store_id =
// store.store_id) INNER JOIN time_by_day ON inventory_fact_1998.time_id =
// time_by_day.time_id WHERE product.gross_weight >= 20.0 AND
// time_by_day.the_date + 2292.0 >= {ts '2005-06-01 00:00:00.0'} AND
// time_by_day.the_date + 2292.0 <= {ts '2005-06-01 14:55:34.119'} AND
// store.store_manager IN ('Byrd', 'Cobb', 'Davis', 'Jones', 'Johnson') GROUP BY
// store.store_id HAVING SUM(inventory_fact_1998.units_shipped) IS NOT NULL )
// GROUP BY store.store_id, store.store_name HAVING
// SUM(inventory_fact_1998.units_shipped) IS NOT NULL ORDER BY store.store_name
// ASC",
//
//    "SELECT store.store_name AS Stores FROM ((inventory_fact_1998 INNER JOIN
// product ON inventory_fact_1998.product_id = product.product_id) INNER JOIN
// store ON inventory_fact_1998.store_id = store.store_id) INNER JOIN
// time_by_day ON inventory_fact_1998.time_id = time_by_day.time_id WHERE
// product.gross_weight >= 20.0 AND time_by_day.the_date + 2292.0 >= {ts
// '2005-06-01 00:00:00.0'} AND time_by_day.the_date + 2292.0 <= {ts '2005-06-01
// 14:57:05.976'} AND store.store_manager IN ('Byrd', 'Cobb', 'Davis', 'Jones',
// 'Johnson') GROUP BY store.store_id, store.store_name HAVING
// SUM(inventory_fact_1998.units_shipped) IS NOT NULL ORDER BY store.store_name
// ASC"
    ];


//testSuiteSql1 sql =
//    normalizeWhitespace (testSql sql) == sql;

testSuiteSql =
    testSuiteSqlHelper testSuiteSql_tests;
//    foldLeft (\prev curr -> prev && (normalizeWhitespace (testSql curr) == curr))
// True testSuiteSql_tests;

testSuiteSqlHelper queries =
    case queries of
    [] -> True;
    sql:sqls ->
        let
            parsedSql = normalizeWhitespace (testSql sql);
        in
//          trace ("parsed: "++parsedSql++"\n") parsedSql == trace ("input: "++sql++"\n")
// sql && testSuiteSqlHelper sqls;
//        	trace ("parsed: "++parsedSql++"\n") 
            parsedSql == sql && testSuiteSqlHelper sqls;
    ;

testSql sql = 
    let
        query = parseSelectStatement sql;
    in
        Sql.queryText SqlBuilder.defaultSqlBuilder True query;

    
//testSuiteSql =
//    testSql "SELECT store.store_name AS Stores FROM store WHERE
// store.store_manager IN ('Byrd', 'Cobb', 'Davis', 'Jones', 'Johnson') GROUP BY
// store.store_id, store.store_name ORDER BY store.store_name ASC"
//        == "SELECT\n store.store_name AS Stores\nFROM\n store\nWHERE\n
// store.store_manager IN ('Byrd', 'Cobb', 'Davis', 'Jones', 'Johnson')\nGROUP
// BY\n store.store_id,\n store.store_name\nORDER BY\n store.store_name ASC";

testExpr sql = 
    let
        query = parseExpression sql;
    in
        Sql.expressionText SqlBuilder.defaultSqlBuilder query;

//testOld sql =
//    Sql.queryText SqlBuilder.defaultSqlBuilder True (LegacySqlParser.parseSelectStatement sql);

testSuiteExpr =
    (testExpr "1") == "1" &&
    (testExpr "1.1") == "1.1" &&
    (testExpr ".101") == "0.101" &&
    (testExpr "1e10") == "1.0E10" &&
    (testExpr "-1e10") == "-1.0E10" &&
    (testExpr "1e+10") == "1.0E10" &&
    (testExpr "1e-10") == "1.0E-10" &&
    (testExpr "-1e-10") == "-1.0E-10";

public unitTests = 
    (testSuiteExpr || Prelude.error "SqlParser.testSuiteExpr: Tests failed") &&
    (testSuiteSql  || Prelude.error "SqlParser.testSuiteSql: Tests failed");

