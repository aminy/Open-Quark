/*
 * Copyright (c) 2007 BUSINESS OBJECTS SOFTWARE LIMITED
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *  
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *  
 *     * Neither the name of Business Objects nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *  
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */


/*
 * ExpressionLexer_Tests.cal
 * Created: September 2007
 * By: Malcolm Sharpe. 
 */

module Cal.Test.Utilities.ExpressionLexer_Tests;

import Cal.Core.Prelude using
    // Standard Prelude import preamble
    typeConstructor = Int, Double, String, Boolean, Char, Integer, JObject, JList, Maybe, Ordering;
    dataConstructor = False, True, LT, EQ, GT, Nothing, Just;
    typeClass = Eq, Ord, Num, Inputable, Outputable;
    function = 
        append, compare, concat, const, doubleToString, equals, error, fromJust, fst, input,
        intToString, isNothing, isEmpty,  max, mod, not, output, round, seq, snd, toDouble,
        field1, field2, field3, upFrom, upFromTo;
    
    // Local dependencies not in standard preamble
    typeConstructor = Either;
    dataConstructor = Left, Right;
    function = assert;
    ;

import Cal.Core.String using
    function = toList;
    ;

import Cal.Utilities.Parser using
    typeConstructor = ParseError, GenParser;
    function = parse, pSeq, pReturn;
    ;

import Cal.Utilities.ExpressionLexer using
    typeConstructor = Token;
    function = tokenStream,
               nameToken, integerToken;
    ;

/**
 * Tokenize {@code input@} using a default testing specialization of
 * {@code tokenStream@}.
 */
testTokenize :: String -> Either ParseError [Token];
testTokenize input =
    let
        parser = tokenStream [] [] [] [] [];
    in
        parse parser "test input" (toList input);

/**
 * Tokenize {@code input@}, then apply {@code resultParser@}, and
 * finally call {@code check@} on the output. If any step fails, return false.
 * Otherwise, return true.
 * 
 * @arg input textual input to be tokenized
 * @arg resultParser parser to apply to tokenized input
 * @arg check predicate to be called on the output of {@code resultParser@}
 * @return result of {@code check@}
 */
runTest :: String -> GenParser Token () a -> (a -> Boolean) -> Boolean;
runTest input resultParser check =
    case testTokenize input of
    Left _ -> False;
    Right toks ->
        case parse resultParser "test token list" toks of
        Left _ -> False;
        Right x -> check x;
        ;
    ;

test_name_token = runTest "foo" nameToken (equals "foo");
test_integer_token = runTest "42" integerToken (equals 42);

/**
 * Test that the lexer accepts tokens with leading whitespace.
 */
test_leading_whitespace = runTest "  42" integerToken (equals 42);

/**
 * Test that the lexer accepts tokens that are separated by whitespace.
 */
test_separating_whitespace =
    runTest "foo  42" (nameToken `pSeq` integerToken) (equals 42);

/**
 * Test that the lexer accepts tokens that are not separated by whitespace.
 */
test_no_separating_whitespace =
    runTest "42foo" (integerToken `pSeq` nameToken) (equals "foo");

/**
 * Test that the lexer accepts input containing only whitespace.
 */
test_only_whitespace =
    runTest "  " (pReturn ()) (const True);

unitTests :: Boolean;
public unitTests =
    // Simple token tests.
    assert test_name_token &&
    assert test_integer_token &&
    
    // Whitespace tests.
    assert test_leading_whitespace &&
    assert test_separating_whitespace &&
    assert test_no_separating_whitespace &&
    assert test_only_whitespace &&
    
    // Done.
    True;
