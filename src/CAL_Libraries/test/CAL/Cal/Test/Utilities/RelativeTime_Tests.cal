/*
 * Copyright (c) 2007 BUSINESS OBJECTS SOFTWARE LIMITED
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *  
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *  
 *     * Neither the name of Business Objects nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *  
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */


/*
 * RelativeTime_Tests.cal
 * Created: Oct 10, 2006
 * By: Bo Ilic
 */

/**
 * Contains tests for the {@link module = RelativeTime@} module.
 * 
 * @author Bo Ilic
 */
module Cal.Test.Utilities.RelativeTime_Tests;
import Cal.Core.Prelude using
    typeConstructor = Boolean, Int;
    dataConstructor = Nothing, Just;
    function = assert;
    ;
import Cal.Utilities.RelativeTime using
    typeConstructor = RelativeDateTime;
    dataConstructor = YearDiff, QuarterDiff, MonthDiff, DayDiff, WeekDiff, FirstDayOfWeekDiff, Wednesday;
    function = dateAdd, dateDiff, day, makeRelativeDateTimeValue2, makeRelativeDateValue, month, year;
    ;

import Cal.Utilities.QuickCheck; 

import Cal.Collections.List;

import Cal.Core.Debug;
//addDaysToDateScalabilityTest !n =
//    let
//       addDaysToDateScalabilityTestHelper :: Int -> Boolean;
//       addDaysToDateScalabilityTestHelper !n =
//           assert ((addDaysToDate 5000 (makeRelativeDateValue 1986 10 16)) == (makeRelativeDateValue 2000 6 24)) &&
//           assert ((addDaysToDate (-5000) (makeRelativeDateValue 1986 10 16)) == (makeRelativeDateValue 1973 2 6))
//           ; 
//    in
//        if n > 0 && addDaysToDateScalabilityTestHelper n then
//           addDaysToDateScalabilityTest (n - 1)
//        else
//           Prelude.True; 


yearMonthDayScalabilityTest !n =
    let
        yearMonthDayScalabilityTestHelper :: Int -> Boolean;
        yearMonthDayScalabilityTestHelper !n =
        let
            d1 = makeRelativeDateValue 1999 8 6;
            d2 = makeRelativeDateValue 500 2 28;
        in
            assert (year d1 == 1999 && month d1 == 8 && day d1 == 6) &&
            assert (year d2 == 500 && month d2 == 2 && day d2 == 28)
            ;
    in
        if n > 0 && yearMonthDayScalabilityTestHelper n then
           yearMonthDayScalabilityTest (n - 1)
        else
           Prelude.True; 

//addDaysToDateTimeScalabilityTest !n =
//    let
//        addDaysToDateTimeScalabilityTestHelper :: Int -> Boolean;
//        addDaysToDateTimeScalabilityTestHelper !n =
//            assert ((addDaysToDateTime 1000.5 (makeRelativeDateTimeValue2 1986 10 16)) == (makeRelativeDateTimeValue 1989 7 12 12 0 0)) &&
//            assert ((addDaysToDateTime (negate 1000.5) (makeRelativeDateTimeValue2 1986 10 16)) == (makeRelativeDateTimeValue 1984 1 19 12 0 0))
//            ;    
//    in
//        if n > 0 && addDaysToDateTimeScalabilityTestHelper n then
//            addDaysToDateTimeScalabilityTest (n - 1)
//        else
//            Prelude.True;
    
dateDiffScalabilityTest !n =
    let
        dateDiffScalabilityTestHelper :: Int -> Boolean;    
        dateDiffScalabilityTestHelper !n =
        
            assert (dateDiff YearDiff (makeRelativeDateTimeValue2 1999 10 7) (makeRelativeDateTimeValue2 2005 2 10) Nothing == 6) &&
            assert (dateDiff YearDiff (makeRelativeDateTimeValue2 1999 12 31) (makeRelativeDateTimeValue2 2000 1 1) Nothing == 1) &&
            assert (dateDiff YearDiff (makeRelativeDateTimeValue2 1999 1 1) (makeRelativeDateTimeValue2 1999 12 31) Nothing == 0) &&
        
            assert (dateDiff QuarterDiff (makeRelativeDateTimeValue2 1999 10 6) (makeRelativeDateTimeValue2 2003 5 20) Nothing == 14) &&
            assert (dateDiff QuarterDiff (makeRelativeDateTimeValue2 1999 3 31) (makeRelativeDateTimeValue2 1999 4 1) Nothing == 1) &&
            assert (dateDiff QuarterDiff (makeRelativeDateTimeValue2 1999 1 1) (makeRelativeDateTimeValue2 1999 3 31) Nothing == 0) &&
        
            assert (dateDiff MonthDiff (makeRelativeDateTimeValue2 1999 3 15) (makeRelativeDateTimeValue2 1999 7 13) Nothing == 4) &&
        
            assert (dateDiff DayDiff (makeRelativeDateTimeValue2 1999 10 7) (makeRelativeDateTimeValue2 1999 10 10) Nothing == 3) &&   
             
            assert (dateDiff WeekDiff (makeRelativeDateTimeValue2 1999 10 19) (makeRelativeDateTimeValue2 1999 10 25) Nothing == 0) &&
            assert (dateDiff WeekDiff (makeRelativeDateTimeValue2 1999 10 19) (makeRelativeDateTimeValue2 1999 10 26) Nothing == 1) &&
        
            assert (dateDiff FirstDayOfWeekDiff (makeRelativeDateTimeValue2 1999 10 5) (makeRelativeDateTimeValue2 1999 10 29) (Just Wednesday) == 4) &&
            assert (dateDiff FirstDayOfWeekDiff (makeRelativeDateTimeValue2 1999 10 6) (makeRelativeDateTimeValue2 1999 10 29) (Just Wednesday) == 3) &&
            assert (dateDiff FirstDayOfWeekDiff (makeRelativeDateTimeValue2 1999 10 5) (makeRelativeDateTimeValue2 1999 10 27) (Just Wednesday) == 4)
            
            ;    
    in
        if n > 0 && dateDiffScalabilityTestHelper n then
            dateDiffScalabilityTest (n - 1)
        else
            Prelude.True;    


/**
 * Used to map between Add and Diff types
 * 
 * @arg add the add type
 * 
 * @return the corresponding diff type
 */
private lookupDiff add =
    let
        mapAddDiff = [(RelativeTime.YearAdd, RelativeTime.YearDiff),
                      (RelativeTime.QuarterAdd, RelativeTime.QuarterDiff),
                      (RelativeTime.MonthAdd, RelativeTime.MonthDiff),
                      (RelativeTime.DayAdd, RelativeTime.DayDiff),
                      (RelativeTime.HourAdd, RelativeTime.HourDiff),
                      (RelativeTime.WeekAdd, RelativeTime.WeekDiff),
                      (RelativeTime.MinuteAdd, RelativeTime.MinuteDiff),
                      (RelativeTime.SecondAdd, RelativeTime.SecondDiff)];
    in
        case List.find (\elem -> Prelude.fst elem  == add) mapAddDiff of
        Just elem -> 
            Prelude.snd elem;
        Nothing ->
            Prelude.error ("Failed to find " ++ (Debug.show add) ++ ", perhaps it has been added to relativetime and the tests need to be updated");
    ;

/**
 * The property checks the operation of the dateAdd and dateDiff functions by asserts that
 * (date + amount) - date == amount
 */
prop_dateAddDiff :: RelativeDateTime -> Int -> RelativeTime.DateAddType -> Boolean;
prop_dateAddDiff time amount addType =
    let         
        amountToAdd = Prelude.abs amount; //only permits positive amounts to add.
        addedTime = dateAdd addType amountToAdd time;
        diff = dateDiff  (lookupDiff addType) time addedTime  Nothing;
    in
        (diff == amountToAdd);

public testModule =
    assert (QuickCheck.quickCheck prop_dateAddDiff);



