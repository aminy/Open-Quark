/*
 * Copyright (c) 2007 BUSINESS OBJECTS SOFTWARE LIMITED
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 *     * Neither the name of Business Objects nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * BoundedParallelMap.cal
 * Creation date: October 15, 2007
 */

/**
 * Various functions for parallel evaluation in CAL. CAL must be started with
 * the system propery org.openquark.cal.machine.lecc.concurrent_runtime for the
 * functions in this module to truly behave in a parallel fashion. Otherwise
 * they result in a sequential approximations of the parallel functionality.
 *
 * @author Tom Haggie
 */
module Cal.Experimental.Concurrent.BoundedParallel;

import Cal.Core.Prelude using
    typeClass = Inputable, Outputable;
    typeConstructor = CalFunction, Int, JObject;
    function = concat, outputCalValueStrict, seq, toCalValue;
    ;
import Cal.Core.System using
    function = concurrentRuntime;
    ;
import Cal.Core.Record;
import Cal.Collections.List using
    function = chop, map, transpose;
    ;
import Cal.Experimental.Concurrent.Parallel using 
    function = parallelMap;
    ;

/**
 * These imports are used so we can ask the JVM the number of processors the 
 * machine we're running on has so we can use it to optimize for the number of 
 * threads we generate to parallelize mapping functions.
 */    
data foreign unsafe import jvm "java.lang.Runtime" private JRuntime deriving Outputable, Inputable;
foreign unsafe import jvm "method availableProcessors" private availableProcessors :: JRuntime -> Int;
foreign unsafe import jvm "static method java.lang.Runtime.getRuntime" private jGetRuntime :: JRuntime;

/**
 * The number of processors the JVM claims the machine we're running on has, 
 * used to decide how many threads to use by default to split work over.
 */
processorCount = 
    availableProcessors jGetRuntime;


/**
 * If CAL is started with the system property
 * org.openquark.cal.machine.lecc.concurrent_runtime then this function provides
 * a way of mapping a function over a list where the number of threads to use to
 * process the list is specified. 
 * 
 * This should be used where the processing is limited by IO and through 
 * benchmarking an optimal number of threads has been found.
 *
 * If CAL is not started with the above system property then this function
 * behaves similar to {@link map@} except that the elements of the list are
 * first traversed (without being evaluated), so it will still hang for an
 * infinite list.
 *
 * If you want to ensure that the components of the list are actually evaluated
 * to WHNF prior to the result being returned, just compose with {@link
 * List.strictList@}.
 *
 * @arg poolSize - the number of thread to use to process the list
 * @arg mapFunction
 * @arg list
 * @return applies {@code mapFunction@} to each element of {@code list@}, and
 *   evaluates these applications, in parallel, to WHNF. The function may return
 *   prior to all elements being evaluated to WHNF.
 */  
boundedParallelMap :: Int -> (a -> b) -> [a] -> [b];
public boundedParallelMap poolSize mapFunction !list =
    let
        // split the list into lists the size of the number of pools we want
        choppedList = chop poolSize list;

        // Transpose the list of lists so we get a list of lists the size of the pool we want 
        transposedChoppedList = transpose choppedList; 
        
        // process the lists in parallel
        processedList = parallelMap (map mapFunction) transposedChoppedList;
        
        // Transpose the lists back into the original order
        transposedProcessedList = transpose processedList; 
        
        // join the lists back together into one list of results
        joinedList = concat transposedProcessedList;
    in
        if (poolSize == 1) then
            map mapFunction list
        else
            joinedList;
    
    
/**
 * If CAL is started with the system property
 * org.openquark.cal.machine.lecc.concurrent_runtime then this function provides
 * a parallel version of {@link List.map@}. This function will not terminate for
 * infinite lists, unlike {@link List.map@}. A separate evaluation thread is
 * created for each processor the machine has, each {@code list@} element begin 
 * evaluating the application of {@code mapFunction@} to each element to 
 * weak-head normal form (WHNF).
 * 
 * This should be used when the function being applied is mainly limited by 
 * processor bandwidth (ie no IO) and a simple spreading of load is required. 
 *
 * If CAL is not started with the above system property then this function
 * behaves similar to {@link map@} except that the elements of the list are
 * first traversed (without being evaluated), so it will still hang for an
 * infinite list.
 *
 * If you want to ensure that the components of the list are actually evaluated
 * to WHNF prior to the result being returned, just compose with {@link
 * List.strictList@}.
 *
 * @arg mapFunction
 * @arg list
 * @return applies {@code mapFunction@} to each element of {@code list@}, and
 *   evaluates these applications, in parallel, to WHNF. The function may return
 *   prior to all elements being evaluated to WHNF.
 */
cpuBoundParallelMap :: (a -> b) -> [a] -> [b];
public cpuBoundParallelMap mapFunction !list =
    boundedParallelMap processorCount mapFunction list;
