/*
 * Copyright (c) 2007 BUSINESS OBJECTS SOFTWARE LIMITED
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *  
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *  
 *     * Neither the name of Business Objects nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *  
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */


/*
 * FormatRecord.cal
 * Created: Oct 15, 2007
 * By: Tom Haggie
 */


module Cal.Experimental.Utilities.FormatRecord;


import Cal.Core.Prelude using
    typeConstructor = Boolean, Int, String, Double, Long;
    dataConstructor = False, Just, Nothing;
    function = concat, not, error;
    ;
import Cal.Core.String using
    function = substring;
    ;
import Cal.Core.Debug using
    typeClass = Show;
    function = show;
    ;
import Cal.Core.Record using
    function = fieldNames, unsafeBuildListFromRecord;
    ;
import Cal.Experimental.Utilities.RegEx using
    typeConstructor = MatchResult;
    function = makeRegEx, match, matchResultBoundries;
    ;
import Cal.Collections.List using
    function = map;
    ;
import Cal.Collections.Map using
    typeConstructor = Map;
    function = lookup, fromList;
    ;



/**
 * Type class for serializing things as strings, we don't use show as show 
 * annoyingly puts quotes around strings. This should probably be extended to 
 * deal with locales and formatting. We make it inherit from show so a default 
 * using show can be used.
 * 
 * This probably doesn't want to be a part of FormatRecord when this stuff moves 
 * out of experiments
 */    
public class Show a => StringOutputable a where 
    public toString :: a -> String
    default outputWithShow;
    ;

// Default implementation of StringOutputable - just uses show
outputWithShow :: StringOutputable a => a -> String;
outputWithShow showable =
    show showable;

// Make Strings outputable, we don't use the default as show puts " before and
// after the string.
instance StringOutputable String where
    toString = outputStringForString;
    ;

// Outputing a string as a string is just identity 
outputStringForString s = s;

// Make simple types StringOutputable
instance StringOutputable Int where;
instance StringOutputable Double where;
instance StringOutputable Boolean where;
instance StringOutputable Long where;

/**
 * Applies toString to each of the record's values 
 */
makeStringMapFromRecord :: StringOutputable r => {r} -> (Map String String);
makeStringMapFromRecord !value =
    let
        
        showDict :: StringOutputable r => {r} -> Record.Dictionary {r};
        showDict r = Record.dictionary r "toString";

        dict = showDict value;
    in
        fromList $ List.zip (fieldNames value) (unsafeBuildListFromRecord dict  value);
    
    
/**
 * Takes a record whose fields are StringOutputable and uses it to construct a
 * string from the message supplied. The message has the record's field names in
 * brackets. Eg. "Hello {name}, welcome to {company} {product}" Where name, 
 * company and product are field names of a record. If a 
 */
formatRecord :: StringOutputable r => String -> {r} -> String;
public formatRecord message record =
    let
        // Regular expression for matching either a field name or number
        // eg. {myField} or {#1}
        regEx = makeRegEx "\\{\\w+\\}|\\{#\\d+\\}";
        
        // Use the regular expression to split up where in the string the 
        // field values are parameterized
        matchResults :: [MatchResult]; 
        matchResults = (match regEx message);

        // Convert the MatchResults into a flat list of boundries
        boundries :: [Int];
        boundries = concat $ map matchResultBoundries matchResults;
        
        // Create a map from the record's field names to its values
        recordMap :: Map String String;
        recordMap = makeStringMapFromRecord record;
        
        // Field Names need to be looked up, non fields need to be extracted as 
        // substrings from the original message
        swapFieldNamesForFieldValues :: Boolean -> Int -> [Int] -> [String];
        swapFieldNamesForFieldValues isFieldName offset boundries =
            let
                extract :: Int -> String;
                extract end =
                    let
                        text = substring message offset end;
                        key = substring message (offset+1) (end-1);
                        found = lookup key recordMap;
                    in
                        if isFieldName then
                            case found of
                            Just value -> value;
                            Nothing -> error ("Field \"" ++ key ++ "\" not found in record with fields: " ++ (show (fieldNames record)));
                        else
                            text;
            in
                case boundries of
                [] -> [substring message offset (String.length message)];
                h : t -> (extract h) : (swapFieldNamesForFieldValues (not isFieldName) h t);
            ;
    in
        concat (swapFieldNamesForFieldValues False 0 boundries);