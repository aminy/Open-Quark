/*
 * Copyright (c) 2007 BUSINESS OBJECTS SOFTWARE LIMITED
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *  
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *  
 *     * Neither the name of Business Objects nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *  
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/** 
 * Sum-col benchmark implementation for the internet bechmark shootouts
 * 
 * This code is based on and inspired by the other entries in the 
 * The Great Computer Language Shootout  {@url http://shootout.alioth.debian.org/@}.
 * @author Magnus Byne
 */
module Cal.Benchmarks.Shootout.Sumcol;

import Cal.Core.Prelude using
    typeConstructor = Int, String;
    function = eager, intToString, stringToInt;
    ;

import Cal.IO.Console using
    typeConstructor = JBufferedReader;
    function = isNullString, makeBufferedReader, printLine, readLine, stdin;
    ;

main :: [String] -> ();
public main args =
    let
        loop :: JBufferedReader -> Int -> Int;
        loop !input !sum =
            let
                line = eager $ readLine input;
            in
                if isNullString line then
                    sum
                else
                    loop input (sum + stringToInt line)
            ;
    in
        printLine (intToString (loop (makeBufferedReader stdin) 0))
    ;

