/*
 * Copyright (c) 2007 BUSINESS OBJECTS SOFTWARE LIMITED
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 *     * Neither the name of Business Objects nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Messages benchmark implementation for the internet bechmark shootouts see: {@url
 * http://shootout.alioth.debian.org@}
 *
 * This code implements the body of the threads in this benchmark, the threads
 * are started and controlled by the java program.
 *
 * This code is part of a solution that uses Java to control the threads and CAL
 * to implment the thread bodies. There is also a pure CAL version of this
 * benchmark, see {@link module = "Cal.Benchmarks.Shootout.Message"@}
 *
 * @author Magnus Byne
 */
module Cal.Benchmarks.Shootout.MessageThreadBody;

import Cal.Core.Prelude using
    typeClass = Inputable, Outputable;
    typeConstructor = Double, Int, String, CalFunction, JObject, CalValue;
    function =
        fromInt, seq, eager, add, stringToInt, input, output, upFromTo,
        makeCalFunction, unsafeCoerce;
    ;

import Cal.Core.Debug using
    typeClass = Show;
    function = show;
    ;

import Cal.Collections.List;

data foreign unsafe import jvm "org.openquark.cal.benchmarks.shootout.SynchronizedQueue"
    public JSynchronizedQueue deriving Inputable, Outputable, Show;
foreign unsafe import jvm "method enqueue"
    private enqueue :: JSynchronizedQueue -> Int -> ();
foreign unsafe import jvm "method dequeue"
    private dequeue :: JSynchronizedQueue -> Int;

/**
 * read values from the input queue, increment them and add them into the
 * output queue finish when value of -1 is read from the input queue.
 */
threadBody :: JSynchronizedQueue -> JSynchronizedQueue -> Int;
threadBody !inqueue !outqueue =
    let
        inValue :: Int;
        inValue = eager $ dequeue inqueue;
    in
        if (inValue == -1) then
            //thread closes if it is feed -1  - this is not in the benchmark spec
            //but is used here to cleanup properly
            enqueue outqueue (-1 :: Int)
            `seq`
            inValue
        else
            enqueue outqueue (inValue + 1)
            `seq`
            threadBody inqueue outqueue
    ;
