/*
 * Copyright (c) 2007 BUSINESS OBJECTS SOFTWARE LIMITED
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *  
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *  
 *     * Neither the name of Business Objects nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *  
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/** 
 * SpectralNorm benchmark implementation for the internet bechmark shootouts
 * see: {@url http://shootout.alioth.debian.org/gp4/benchmark.php?test=spectralnorm&lang=all@}
 * 
 * This code is based on and inspired by the entries in the 
 * The Great Computer Language Shootout  {@url http://shootout.alioth.debian.org/@}.
 * @author Magnus Byne
 */
module Cal.Benchmarks.Shootout.SpectralNorm;

import Cal.Core.Prelude using
    typeClass = Inputable, Outputable;
    typeConstructor = Double, Int, String;
    function = eager, fromInt, seq, stringToInt;
    ;
import Cal.Utilities.Math using
    function = sqrt;
    ;
import Cal.Collections.List using
    function = head;
    ;
import Cal.Utilities.MessageFormat using
    function = formatWithPattern;
    ;
import Cal.Utilities.Locale using
    function = invariantLocale;
    ;
import Cal.IO.Console using
    function = printLine;
    ;

data foreign unsafe import jvm "double[]" JVector deriving Inputable, Outputable;

foreign unsafe import jvm "newArray" newVector :: Int -> JVector;

foreign unsafe import jvm "subscriptArray" subscript :: JVector -> Int -> Double;

foreign unsafe import jvm "updateArray"
    update :: JVector -> Int -> Double -> Double;

/** get element i,j of infinite matrix A*/
matrixA :: Int -> Int -> Double;
matrixA !i !j = 1.0 / fromInt ((i + j) * (i + j + 1) / 2 + i + 1);

/** multiply A by v*/
multiplyAv :: Int -> JVector -> JVector -> ();
multiplyAv !n !v !av =
    let
        go :: Int -> Int -> ();
        go !i !j =
            if j < n then
                update
                    av
                    i
                    (av `subscript` i + matrixA i j * v `subscript` j)
                `seq`
                go i (j + 1)
            else
                let
                    inc :: Int;
                    inc = i + 1;
                in
                    if inc < n then
                        update av inc 0.0
                        `seq`
                        go inc 0
                    else
                        ()
            ;
    in
        go (-1) n
    ;

/** multiply (Transpose A) by v*/
multiplyAtv :: Int -> JVector -> JVector -> ();
multiplyAtv !n !v !av =
    let
        go :: Int -> Int -> ();
        go !i !j =
            if j < n then
                update
                    av
                    i
                    (av `subscript` i + matrixA j i * v `subscript` j)
                `seq`
                go i (j + 1)
            else
                let
                    inc :: Int;
                    inc = i + 1;
                in
                    if inc < n then
                        update av inc 0.0
                        `seq`
                        go inc 0
                    else
                        ()
            ;
    in
        go (-1) n
    ;

/**(transpose A) * A * v*/
multiplyAtAv :: Int -> JVector -> JVector -> JVector -> ();
multiplyAtAv !n !temp !v !result =
    multiplyAv n v temp
    `seq`
    multiplyAtv n temp result
    ;

/**run n steps of the approximation*/
approximate :: Int -> Double;
approximate !n =
    let
        u :: JVector;
        u = eager $ newVector n;

        v :: JVector;
        v = eager $ newVector n;

        temp :: JVector;
        temp = eager $ newVector n;

        doStep :: Int -> ();
        doStep !i =
            if i == 0 then
                ()
            else
                multiplyAtAv n temp u v
                `seq`
                multiplyAtAv n temp v u
                `seq`
                doStep (i - 1)
            ;

        vbv :: Int -> Double -> Double;
        vbv !i !sum =
            if i == n then
                sum
            else
                vbv (i + 1) (sum + u `subscript` i * v `subscript` i)
            ;

        vv :: Int -> Double -> Double;
        vv !i !sum =
            if i == n then
                sum
            else
                vv (i + 1) (sum + v `subscript` i * v `subscript` i)
            ;

        initVector :: Int -> Int -> JVector -> ();
        initVector !i !size !v =
            if i == size then
                ()
            else
                update v i 1.0
                `seq`
                initVector (i + 1) size v
            ;
    in

        initVector 0 n u
        `seq`
        doStep 10
        `seq`
        sqrt (vbv 0 0.0 / vv 0 0.0)
    ;

main :: [String] -> ();
public main !args =
    let
        n :: Int;
        n = eager $ stringToInt (head args);
    in
        printLine
            (formatWithPattern
                "{0,number,#.000000000}"
                invariantLocale
                {#1 = approximate n}
            )
    ;

