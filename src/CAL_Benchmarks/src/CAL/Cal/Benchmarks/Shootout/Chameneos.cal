/*
 * Copyright (c) 2007 BUSINESS OBJECTS SOFTWARE LIMITED
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 *     * Neither the name of Business Objects nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Chamenos benchmark implementation for the internet bechmarks game see: {@url
 * http://shootout.alioth.debian.org@}
 *
 * This code is based on and inspired by the entries in the The Computer
 * Language Benchmarks Game {@url http://shootout.alioth.debian.org/@}.
 * @author Magnus Byne
 */
module Cal.Benchmarks.Shootout.Chameneos;

import Cal.Core.Prelude using
    typeClass = Eq, Inputable, Outputable;
    typeConstructor = Int, String, CalValue, JObject, Boolean;
    function =
        eager, input, output, seq, stringToInt, add, toCalValue, unsafeCoerce,
        unsafeFromCalValue, error;
    ;

import Cal.Core.Debug using
    function = show;
    ;

import Cal.Collections.List using
    function = map, head, strictList, foldLeft1Strict;
    ;

import Cal.Experimental.Concurrent.Parallel using
    function = parallelMap;
    ;

import Cal.IO.Console using
    function = printLine;
    ;

import Cal.Core.System using
    function = concurrentRuntime;
    ;

data Color =
    Blue |
    Red |
    Yellow |
    Faded
    deriving Inputable, Outputable, Eq
    ;

/**
 * A meeting room is a place where Chameneos meet. The meeting room can either
 * be empty or occupied. The meeting room has a count of the number of meetings
 * can take place. This is decremented every time a meeting occurs.
 */
data MeetingRoom =
    Empty n :: !Int |
    Occupied
        n :: !Int
        other :: !Color
    deriving Inputable, Outputable, Eq
    ;

/** get new color based on the color of two meeting Chameneos */
complement :: Color -> Color -> Color;
complement !color1 !color2 =
    if (color1 == color2) then
        color1
    else
        (
            case color1 of
            Blue ->
                if (color2 == Red) then
                    Yellow
                else
                    Red
                ;
            Red ->
                if (color2 == Blue) then
                    Yellow
                else
                    Blue
                ;
            Yellow ->
                if (color2 == Blue) then
                    Red
                else
                    Blue
                ;
        )
    ;

/**
 * This function implements the behaviour of each chameneo. It keeps trying to
 * enter the meeting room until it's colour is faded, and then returns the
 * number of meetings.
 */
chameneos ::
    Color
    -> MutableVariable MeetingRoom
    -> MutableVariable Color
    -> Int
    -> Int;
chameneos !color !meeting !occupant !meetingCount =
    let
        meetingRoom :: MeetingRoom;
        meetingRoom = eager $ takeMutableVariable meeting;
    in
        if (color == Faded) then
            meetingCount
        else
            (
                case meetingRoom of
                Empty n ->
                    if (n == 0) then
                        putMutableVariable meeting (Empty 0)
                        `seq`
                        chameneos Faded meeting occupant meetingCount
                    else
                        putMutableVariable meeting (Occupied n color)
                        `seq`
                        chameneos
                            (complement (takeMutableVariable occupant) color)
                            meeting
                            occupant
                            (meetingCount + 1)
                    ;
                Occupied n otherColor ->
                    putMutableVariable occupant color
                    `seq`
                    putMutableVariable meeting (Empty (n - 1))
                    `seq`
                    chameneos
                        (complement otherColor color)
                        meeting
                        occupant
                        (meetingCount + 1)
                    ;
            )
    ;

main :: [String] -> ();
public main !args =
    let
        n :: Int;
        n = eager $ stringToInt (head args);

        meetingRoom :: MutableVariable MeetingRoom;
        meetingRoom = eager $ makeMutableVariable ();

        occupant :: MutableVariable Color;
        occupant = eager $ makeMutableVariable ();
    in
        if concurrentRuntime then
            putMutableVariable meetingRoom (Empty n)
            `seq`
            printLine
                (show
                    (foldLeft1Strict
                        add
                        (parallelMap
                            (
                                \colour ->
                                    chameneos colour meetingRoom occupant 0
                            )
                            [Red, Blue, Yellow]
                        )
                    )
                )
        else
            error
                "You must define the VM arg org.openquark.cal.machine.lecc.concurrent_runtime to run this program"
    ;

//////////////////////////////////////////////////////////////////////
// This implements MutableVariable, similar to m-structures in Id.

/**
 * MutableVariable represent a value that can be passed between threads using
 * put and take. It has the same semantics as a BlockableQueue of length 1.
 */
data public MutableVariable a =
    private MutableVariable atomicRef :: !AtomicReference
    ;

/** make a new mutable variable */
makeMutableVariable :: () -> MutableVariable a;
public makeMutableVariable !unused = MutableVariable createAtomicReference;

/**
 * Put a value into a mutable variable. If the variable is not empty this
 * function will block.
 */
putMutableVariable :: MutableVariable a -> a -> ();
public putMutableVariable !mutable !value =
    let
        put :: AtomicReference -> JObject -> ();
        put !ref !value =
            if compareAndSet ref null value then
                ()
            else
                yield
                `seq`
                put ref value
            ;
    in
        case mutable of
        MutableVariable {atomicRef} ->
            put atomicRef (output (toCalValue value));
    ;

/**
 * take a value from a mutable variable, if the there is no value in the
 * variable this will block.
 */
takeMutableVariable :: MutableVariable a -> a;
public takeMutableVariable !mutable =
    let
        take :: AtomicReference -> JObject;
        take !atomicRef =
            let
                value = eager $ getAndSet atomicRef null;
            in
                if isNull value then
                    yield
                    `seq`
                    take atomicRef
                else
                    value
            ;
    in
        case mutable of
        MutableVariable {atomicRef} ->
            unsafeFromCalValue $ input $ take atomicRef;
    ;

data foreign unsafe import jvm "java.util.concurrent.atomic.AtomicReference"
    private AtomicReference;

foreign unsafe import jvm "constructor"
    private createAtomicReference :: AtomicReference;

foreign unsafe import jvm "method weakCompareAndSet"
    private compareAndSet :: AtomicReference -> JObject -> JObject -> Boolean;

foreign unsafe import jvm "method getAndSet"
    private getAndSet :: AtomicReference -> JObject -> JObject;

foreign unsafe import jvm "static method java.lang.Thread.yield"
    private yield :: ();

foreign unsafe import jvm "isNull" private isNull :: JObject -> Boolean;

foreign unsafe import jvm "null" private null :: JObject;
