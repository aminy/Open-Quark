/*
 * Copyright (c) 2007 BUSINESS OBJECTS SOFTWARE LIMITED
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *  
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *  
 *     * Neither the name of Business Objects nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *  
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */


/*
 * GemModelDemo_Designs.cal
 * Creation date: July 29, 2005.
 * By: Joseph Wong
 */

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Contains a variety of "demo" gems. In this module the gems are expressed using Gem designs
 * (with GemCutter's XML persistence model). In other places, they are expressed:
 * {@unorderedList
 *  {@item as CAL source text in a CAL module@}
 *  {@item programatically using a SourceModel@}
 *  {@item programatically using a GemGraph@}
 * @}
 * 
 * @author Joseph Wong
 */
module Cal.Samples.GemModelDemo_Designs;
import Cal.Core.Prelude using
    function = id, seq, error, add, upFromTo, or, not, and, equals, greaterThan, snd, 
        compose, fst, upFrom, isEven, field3, compare, minBound, maxBound, input, output;
    typeConstructor = Int, Double, String, Boolean, Maybe, Ordering, Char, Long, JObject, JList;
    dataConstructor = True, False, Nothing, Just, LT, EQ, GT;
    typeClass = Eq, Ord, Num, Bounded;    
    typeConstructor = Integer;
    ;
import Cal.Collections.List using
    function = head, last, map, filter, replicate, sortBy, foldLeftStrict, foldRight, repeat, 
        length, zip, isElemBy, drop, take, partition, foldLeft, sum, unzip3, groupBy, unzip;
    function = inputList, outputList, product;
    ;
import Cal.Core.String using  
    function = toList;
    ;        
    
import Cal.Utilities.Summary;

// @@@begin Cal.Samples.GemModelDemo_Designs.factorial saved Fri Jun 01 15:00:30 PDT 2007.
// Warning: this section may be automatically regenerated by the GemCutter.
public factorial n =
    Cal.Collections.List.product
        (Cal.Core.Prelude.upFromTo (1 :: Cal.Core.Prelude.Integer) n)
    ;
// @@@end Cal.Samples.GemModelDemo_Designs.factorial

// @@@begin Cal.Samples.GemModelDemo_Designs.positiveOutlierDetector saved Fri Jun 01 15:01:06 PDT 2007.
// Warning: this section may be automatically regenerated by the GemCutter.
public positiveOutlierDetector sourceData nStdDev =
    let
        isPositiveOutlier x_2 = x_2 - avg >= nStdDev * stdDev;

        avg = Cal.Utilities.Summary.average sourceData;

        stdDev = Cal.Utilities.Summary.populationStandardDeviation sourceData;
    in
        Cal.Collections.List.filter isPositiveOutlier sourceData
    ;
// @@@end Cal.Samples.GemModelDemo_Designs.positiveOutlierDetector

// @@@begin Cal.Samples.GemModelDemo_Designs.filterPositiveOutliers saved Fri Jun 01 15:00:47 PDT 2007.
// Warning: this section may be automatically regenerated by the GemCutter.
public filterPositiveOutliers projectionFunction sourceData nStdDev =
    let
        projectedData =
            Cal.Collections.List.map projectionFunction sourceData;

        stdDev =
            Cal.Utilities.Summary.populationStandardDeviation projectedData;

        avg = Cal.Utilities.Summary.average projectedData;

        isPositiveOutlier argument_2 =
            projectionFunction argument_2 - avg >= nStdDev * stdDev;
    in
        Cal.Collections.List.filter isPositiveOutlier sourceData
    ;
// @@@end Cal.Samples.GemModelDemo_Designs.filterPositiveOutliers

// @@@begin Cal.Samples.GemModelDemo_Designs.demoMap saved Fri Jun 01 14:58:54 PDT 2007.
// Warning: this section may be automatically regenerated by the GemCutter.
public demoMap mapFunction list =
    Cal.Core.Prelude.iff
        (Cal.Core.Prelude.isEmpty list)
        []
        (
            mapFunction (Cal.Collections.List.head list)
            : demoMap mapFunction (Cal.Collections.List.tail list)
        )
    ;
// @@@end Cal.Samples.GemModelDemo_Designs.demoMap





