/*
 * Copyright (c) 2007 BUSINESS OBJECTS SOFTWARE LIMITED
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *  
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *  
 *     * Neither the name of Business Objects nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *  
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * SimpleLibrary.cal
 * Creation date: Oct 17, 2007.
 * By: Joseph Wong
 */

/**
 * This is a demo of some simple functions exposed via a
 * standalone library JAR.
 * 
 * @author Joseph Wong
 */
module Cal.Samples.SimpleLibrary;
import Cal.Core.Prelude using
    typeConstructor = Int, JList;
    ;
import Cal.Collections.List;

filterOutEvenInternal :: [Int] -> [Int];
filterOutEvenInternal list = List.filter Prelude.isOdd list;

/**
 * Filters out the even numbers from the given list.
 * @arg list a list of integers.
 * @return the filtered list.
 */
filterOutEven :: JList -> JList;
public filterOutEven list =
    List.outputList (filterOutEvenInternal (List.inputList list));

/** An infinite list of ones. Can be used with {@link take@}. */
ones :: [Int];
public ones = List.repeat 1;

/**
 * Returns the first {@code n@} elements of the given list in a new list.
 * @arg n the number of elements to take.
 * @arg list the list of integers.
 * @return a list of the requested elements.
 */
take :: Int -> [Int] -> JList;
public take n list = List.outputList (List.take n list);