<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:svg="http://www.w3.org/2000/svg" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:html="http://www.w3.org/1999/xhtml" xmlns:db="http://docbook.org/ns/docbook">
<!--
Copyright (c) 2006 BUSINESS OBJECTS SOFTWARE LIMITED
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimer.
 
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
 
    * Neither the name of Business Objects nor the names of its contributors
      may be used to endorse or promote products derived from this software
      without specific prior written permission.
 
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
-->
<!--
    UsingJFitFromCommandLine.xml
    Creation date: Nov 22, 2006.
    By: Neil Corkum
-->

  <title>Using the Command-line Tool</title>

  <para>This section describes how to invoke JFit from the command
  line.</para>

  <bridgehead>Command-line options</bridgehead>

  <variablelist>
    <varlistentry>
      <term>-cp, -cpf</term>

      <listitem>
        <para>JFit uses Java reflection to analyze selected classes, so that
        it may calculate the functions and types to generate for the selected
        classes, and their constructors, methods, and fields. In order for
        this to succeed, any referenced classes must exist on the classpath,
        either by adding to the classpath with which JFit is invoked, or
        adding entries via the -cp or -cpf options.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>-p, -pf</term>

      <listitem>
        <para>Specify class name patterns. These correspond to the
        <guilabel>Patterns</guilabel> area in the factory UI.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>-xm, -xmf</term>

      <listitem>
        <para>Specify methods to exclude, qualified by class name. For
        instance, “-xm java.lang.Exception.toString;
        java.lang.Exception.hashCode” will exclude the corresponding methods
        from <classname>java.lang.Exception</classname> and its
        subclasses.</para>

        <para>In the factory UI, these options are available in a limited
        manner for some methods from <classname>java.lang.Object</classname>,
        in the <guilabel>Generate optional methods</guilabel> section.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>-o</term>

      <listitem>
        <para>Specify the folder to which the.cal file will be generated. By
        default, the .cal file will be generated to the current folder.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>-f</term>

      <listitem>
        <para>Specify the .jar file(s) containing the desired class(es). These
        correspond to the jar file import source in the factory UI. In the
        absence of any import source options, the tool will use the current
        folder as the import source.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>-d</term>

      <listitem>
        <para>Specify the folder(s) containing the desired class(es). These
        correspond to the folder import source in the factory UI. In the
        absence of any import source options, the tool will use the current
        folder as the import source.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>-ws</term>

      <listitem>
        <para>Specify the workspace which will be used as the basis for the
        generation. This option will affect whether the generated module will
        be able to reuse an existing type from an existing module. If module M
        contains type T, the generated module can reuse type T only if the
        workspace contains module M.</para>

        <para>The default workspace is
        <filename>gemcutter.default.cws</filename>.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>-public, -private, privateTypeImpl</term>

      <listitem>
        <para>Specify the scopes of the generated types and functions. This
        corresponds to the generated scopes in the factory UI.</para>

        <para>The default visibility is “-private”.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>-quiet, -verbose</term>

      <listitem>
        <para>These options can be used to control the amount of console
        output which is given by the tool.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>-h</term>

      <listitem>
        <para>Dump a help message to the console.</para>
      </listitem>
    </varlistentry>
  </variablelist>
</section>
