/*
 * Copyright (c) 2007 BUSINESS OBJECTS SOFTWARE LIMITED
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *  
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *  
 *     * Neither the name of Business Objects nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *  
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */


/*
 * Functor.cal
 * Creation date: Oct 10, 2006.
 * By: Bo Ilic
 */

/**
 * Defines the {@link typeClass = Functor@} type class and some useful instances.
 * 
 * @author Bo Ilic
 */
module Cal.Core.Functor;
import Cal.Core.Prelude using
    typeConstructor = List, Maybe;
    dataConstructor = Nothing, Just;
    ;
import Cal.Collections.List;
import Cal.Collections.Array using
    typeConstructor = Array;
    ;
import Cal.Collections.Map using
    typeConstructor = Map;
    ;
import Cal.Collections.IntMap using
    typeConstructor = IntMap;
    ;
import Cal.Collections.LongMap using
    typeConstructor = LongMap;
    ;

/**
 * The {@link typeClass = Functor@} type class is used to for types that can have functions mapped over them.
 * 
 * Instances of {@link typeClass = Functor@} should satisfy the following algebraic laws to behave as
 * expected:
 * {@orderedList
 *     {@item {@code map Prelude.id == Prelude.id@}@}
 *     {@item {@code map (f # g) == (map f) # (map g)@}@}
 * @}
 */
public class Functor f where
    public map :: (a -> b) -> (f a -> f b);
    ;
 
instance Functor List where
    map = List.map;
    ;

instance Functor Array where
    map = Array.map;
    ;

instance Functor Maybe where
    map = mapMaybe;
    ;

mapMaybe :: (a -> b) -> (Maybe a -> Maybe b);
private mapMaybe mappingFunction !maybeValue =
    case maybeValue of
    Nothing -> Nothing;
    Just {value} -> Just (mappingFunction value);
    ;

instance Functor (Map k) where
    map = Map.map;
    ;

instance Functor IntMap where
    map = IntMap.map;
    ;

instance Functor LongMap where
    map = LongMap.map;
    ;
