/*
 * Copyright (c) 2007 BUSINESS OBJECTS SOFTWARE LIMITED
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *  
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *  
 *     * Neither the name of Business Objects nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *  
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */


/*
 * Rectangle.cal
 * Creation date: July 8, 2005.
 * By: Bo Ilic
 */

/**
This module contains an approach in CAL to solving the challenge of Jim Weirich to write a small
example of a program in OO style in non-OO languages. The code is in Shape.cal, Circle.cal, Rectangle.cal and Shape_Tests.cal.

http://onestepback.org/articles/poly/
http://www.angelfire.com/tx4/cus/shapes/index.html

See Shape.cal for detailed comments.

@author Bo Ilic
*/
module Cal.Test.General.Rectangle;
import Cal.Core.Prelude using
    typeConstructor = Int, String;
    function = concat, intToString;
    ;
      
        
import Cal.Test.General.Shape using
    typeClass = Shape;
    ;

data public Rectangle = 
    public MakeRectangle 
        props   :: !{x :: Int, y :: Int, width :: Int, height :: Int};

instance Shape Rectangle where
    draw = drawRectangle;
    moveTo = moveToRectangle;
    relativeMoveTo = relativeMoveToRectangle;
    ;

drawRectangle :: Rectangle -> String;
drawRectangle !rect =
    case rect of
    MakeRectangle r ->    
        case r of
        {x, y, width, height} ->
            concat ["Drawing a Rectangle at (", intToString x, ", ", intToString y, "), width ", intToString width, ", height ", intToString height];
        ;
    ;
    
moveToRectangle :: Rectangle -> Int -> Int -> Rectangle;
moveToRectangle !rect newX newY = 
    case rect of
    MakeRectangle r ->
        case r of
        {s | x, y} -> MakeRectangle {s | x = newX, y = newY};
        ;
    ;

relativeMoveToRectangle :: Rectangle -> Int -> Int -> Rectangle;
relativeMoveToRectangle !rect dX dY = 
    case rect of
    MakeRectangle r ->    
        case r of
        {s | x, y} -> MakeRectangle {s | x = x + dX, y = y + dY};
        ;
    ;

setWidth :: Rectangle -> Int -> Rectangle;
public setWidth !rect newWidth =
    case rect of
    MakeRectangle r ->    
        case r of
        {s | width} -> MakeRectangle {s | width = newWidth};
        ;
    ;
//under proposed syntax changes this could be...    
//setWidth !rect newWidth = MakeRectangle {rect.MakeRectangle.value | width := newWidth}; 
    
setHeight :: Rectangle -> Int -> Rectangle;
public setHeight !rect newHeight =
    case rect of
    MakeRectangle r ->    
        case r of
        {s | height} -> MakeRectangle {s | height = newHeight};
        ;
    ; 