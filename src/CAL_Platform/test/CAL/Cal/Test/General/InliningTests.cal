/*
 * Copyright (c) 2007 BUSINESS OBJECTS SOFTWARE LIMITED
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *  
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *  
 *     * Neither the name of Business Objects nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *  
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */


/*
 * InliningTests.cal
 * Creation date: August 9, 2005
 * By: Greg McClement
 */

/*
 * This module contains test cases for the CAL inliner. The tests make sure that the inliner is not changing
 * function meaning. 
 *
 * Author: Greg McClement
 */

////////////////////////////////////////////////
module Cal.Test.General.InliningTests;
import Cal.Core.Prelude using
    typeConstructor = Int, Double, String, Boolean, Char, Integer, JObject, JList, Maybe, Ordering;
    dataConstructor = False, True, LT, EQ, GT, Nothing, Just;
    typeClass = Eq, Ord, Num, Inputable, Outputable;
    function = 
        append, compare, concat, const, doubleToString, equals, error, fromJust, fst, input,
        intToString, isNothing, isEmpty,  max, mod, not, output, round, seq, snd, toDouble,
        field1, field2, field3, upFrom, upFromTo;
    dataConstructor = Cons, Nil;
    typeClass = Bounded, Enum, Typeable;
    function = abs, typeOf, unsafeCoerce, assert, empty, field4, field5, field6, field7, 
        asTypeOf, flip;
    ;
import Cal.Collections.List using  
    function = all, chop, filter, foldLeft, foldLeftStrict, foldRight, head, intersperse,
        last, length, list2, map, outputList, reverse, subscript, sum, tail, take,
        zip, zip3, zipWith;
    function = list0;
    ;      
import Cal.Core.String using  
    function = toList;
    ; 
import Cal.Utilities.Math using
    function = cos, sin;
    ;

    
public testMain = 
	assert ( (empty :: [String]) == ([]::[String]) ) &&
	assert ( (list0::[String]) == ([]::[String]) ) &&
	assert ( (empty :: String) == "" ) &&
	assert ( fst (1.0,2.0) == 1.0 ) &&
	assert ( snd (1.0,2.0) == 2.0 ) &&
	assert ( field1 (1.0,2.0) == 1.0 ) &&
	assert ( field2 (1.0,2.0) == 2.0 ) &&
	assert ( field3 (1.0,2.0,3.0) == 3.0 ) &&
	assert ( field4 (1.0,2.0,3.0,4.0) == 4.0 ) &&
	assert ( field5 (1.0,2.0,3.0,4.0,5.0) == 5.0 ) &&
	assert ( field6 (1.0,2.0,3.0,4.0,5.0,6.0) == 6.0 ) &&
	assert ( field7 (1.0,2.0,3.0,4.0,5.0,6.0,7.0) == 7.0 ) &&
	assert ( asTypeOf 1 (1::Int) == 1 ) &&
	assert ( const (1::Int) (1::Int) == 1 ) &&
	assert ( flip Cons Nil (1::Int) == [1] );
	
	
	