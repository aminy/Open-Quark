/*
 * Copyright (c) 2007 BUSINESS OBJECTS SOFTWARE LIMITED
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *  
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *  
 *     * Neither the name of Business Objects nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *  
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * This module contains some test code for checking 
 * Enum and IntEnum derived instances.
 * 
 * @author Magnus Byne
 */
module Cal.Test.General.DerivedInstance;

import Cal.Core.Prelude using
    typeClass = Enum, Eq, IntEnum;
    typeConstructor = Boolean, Maybe, Int;
    dataConstructor = Nothing, Just;
    function = assert, enumToInt, intToEnum, intToEnumChecked, upFromThenTo, upFromTo, upFromThen;
    ;

import Cal.Collections.List using
    function = map, take;
    ;

import Cal.Core.Debug using
    typeClass = Show;
    ;

import Cal.Utilities.QuickCheck using
    typeClass = Arbitrary;
    function = quickCheck;
    ; 


/**an enumerated type with 4 values*/
data TestEnum =
    One |
    Two |
    Three |
    Four deriving Show, Enum, IntEnum, Eq, Arbitrary;

/** an enumerated type for testing with 1 value*/
data UnaryEnum =
    Single deriving Show, Enum, IntEnum, Eq, Arbitrary;


testIntToEnumChecked = 
    ((map intToEnumChecked [4, -1, 0, 3])::[Maybe TestEnum]) == 
        [Nothing, Nothing, Just One, Just Four];

testIntToEnumChecked2 = 
    ((map intToEnumChecked [4, -1, 0, 1])::[Maybe UnaryEnum]) == 
        [Nothing, Nothing, Just Single, Nothing];

testUpFrom =
    Prelude.upFrom Three == [Three, Four] &&
    Prelude.upFrom Four == [Four] &&
    Prelude.upFrom Single == [Single];


intEnum_prop :: (Eq a, IntEnum a) => a -> Boolean; 
intEnum_prop x =
    x == intToEnum (enumToInt x);

/**
 * this test that the derived upFromTo for enumerated type is the same 
 * as the specific integer version in prelude.
 */
enum_prop :: IntEnum a => a -> a -> Boolean;
enum_prop  from to = 
    map enumToInt (upFromTo from to) == upFromTo (enumToInt from) (enumToInt to);

/**
 * compare derived upFromThenTo with the specific integer version from prelude,
 * we use take 20 as upFromTo can result in an infinite list.
 */
enum_prop_2 :: IntEnum a => a -> a -> a -> Boolean;
enum_prop_2  from next to = 
    take 20 (map enumToInt (upFromThenTo from next to)) == take 20 (upFromThenTo (enumToInt from) (enumToInt next) (enumToInt to));


/* these two benchmark tests can be used to compare the performance of
 * the enum derived upFromThen with the prelude int version.   
 */
benchmarkTest = 
    List.endsWith [One] (take 500000 $ upFromThen One One );

preludeBenchmarkTest = 
    List.endsWith [1::Int] (take 500000 $ upFromThen (1::Int) 1 );
    
    
public testModule =
    assert testIntToEnumChecked 
    && assert testIntToEnumChecked2
    && assert testUpFrom
    && assert (quickCheck (intEnum_prop::TestEnum -> Boolean))
    && assert (quickCheck (intEnum_prop::UnaryEnum -> Boolean))
    && assert (quickCheck (enum_prop::TestEnum->TestEnum->Boolean))
    && assert (quickCheck (enum_prop::UnaryEnum->UnaryEnum->Boolean))
    && assert (quickCheck (enum_prop_2::TestEnum->TestEnum->TestEnum->Boolean));
