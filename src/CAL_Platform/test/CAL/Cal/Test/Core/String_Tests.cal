/*
 * Copyright (c) 2007 BUSINESS OBJECTS SOFTWARE LIMITED
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *  
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *  
 *     * Neither the name of Business Objects nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *  
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */


/*
 * String_Tests.cal
 * Creation date: Oct 20, 2005.
 * By: Bo Ilic
 */

/**
 * This module contains test cases for the {@link module = String@} module.
 *
 * Note that *examples functions can and should still go into the String module itself. This is a place
 * for more involved and QA style tests that can not reasonably be considered "examples".
 * 
 * @author Bo Ilic
 */
module Cal.Test.Core.String_Tests;
import Cal.Core.Prelude using
    typeConstructor = Boolean, Int, Maybe, String;
    dataConstructor = False, True, Nothing, Just;
    function = append, assert, concat, equals, fromMaybe, isEmpty, not;
    ;
import Cal.Core.String using
    function = 
        endsWith, equalsIgnoreCase, fromList, indexOfStringFrom, lastIndexOfStringFrom, replaceAllString, space, 
        startsWith, subscript, substring, toList, toLowerCase, toUpperCase;
    ;
import Cal.Utilities.QuickCheck using
    typeConstructor = Property;
    function = implies, quickCheck;
    ; 


/**
 * Returns the position of the first occurrence of one string within another.
 * This position is a 0-based index of the characters in searchString. If
 * findString is not found in searchString, this function returns -1. The start
 * argument sets the starting position for the search. If the maybeIgnoreCase
 * argument is Nothing, the string comparison will be case-sensitive.
 * 
 * @arg maybeStartPosition Just pos, where pos is the position of the first character
 *                         in searchString where the search is to begin, or Nothing.
 * @arg searchString the text string to be searched.
 * @arg findString the text string being sought within searchString.
 * @arg maybeIgnoreCase Just ignoreCase, where the Boolean value ignoreCase indicates
 *                      whether string comparison should be case-insensitive, or Nothing
 *                      if string comparison should be case-sensitive.
 * @return the position of the first occurrence of findString within searchString.
 * @deprecated inStr is a very old CAL function from when we were trying to see how to
 *   represent Crystal Reports Formula language functions in CAL. However, for general purpose
 *   String functions, it is better to create multiple functions rather than having optional
 *   functionality triggered by Maybe type arguments.
 */
inStr :: Maybe Int -> String -> String -> Maybe Boolean -> Int;
inStr maybeStartPosition searchString findString maybeIgnoreCase = 
    if fromMaybe False maybeIgnoreCase then 
        indexOfStringFrom (toLowerCase findString) (fromMaybe 0 maybeStartPosition) (toLowerCase searchString)
    else
        indexOfStringFrom findString (fromMaybe 0 maybeStartPosition) searchString;

inStrExamples :: Boolean;
private inStrExamples =
    assert (inStr Nothing "abcdefg" "bcd" Nothing == 1) &&
    assert (inStr (Just 2) "abcdefg" "cde" Nothing == 2) &&
    assert (inStr (Just 5) "zap zap zap" "zap" Nothing == 8) &&
    assert (inStr Nothing "ABCDEFG" "eF" Nothing == -1) &&
    assert (inStr Nothing "ABCDEFG" "eF" (Just False) == -1) &&
    assert (inStr Nothing "ABCDEFG" "eF" (Just True) == 4) &&
    assert (inStr Nothing "abc" "" Nothing == 0) &&
    assert (inStr Nothing "" "abc" Nothing == -1)
    ;

/**
 * Returns the position of the first occurrence of one string within another.
 * The matching proceeds in the reverse direction from the specified start position.
 * This position is a 0-based index of the characters in searchString. If
 * findString is not found in searchString, this function returns -1. The start
 * argument sets the starting position for the search. If the maybeIgnoreCase
 * argument is Nothing, the string comparison will be case-sensitive.
 * 
 * @arg searchString the text string to be searched.
 * @arg findString the text string being sought within searchString.
 * @arg maybeStartPosition Just pos, where pos is the position of the first character
 *                         in searchString where the search is to begin, or Nothing.
 *                         If the startPosition argument is Nothing, then the search
 *                         starts from the end of searchString.
 * @arg maybeIgnoreCase Just ignoreCase, where the Boolean value ignoreCase indicates
 *                      whether string comparison should be case-insensitive, or Nothing
 *                      if string comparison should be case-sensitive.
 * @return the position of the first occurrence of findString within searchString.
 * @deprecated inStrRev is a very old CAL function from when we were trying to see how to
 *   represent Crystal Reports Formula language functions in CAL. However, for general purpose
 *   String functions, it is better to create multiple functions rather than having optional
 *   functionality triggered by Maybe type arguments. 
 */
inStrRev :: String -> String -> Maybe Int -> Maybe Boolean -> Int;
inStrRev searchString findString maybeStartPosition maybeIgnoreCase =
    if fromMaybe False maybeIgnoreCase then
        lastIndexOfStringFrom (String.toLowerCase findString) (fromMaybe (String.length searchString) maybeStartPosition) (String.toLowerCase searchString)
    else
        lastIndexOfStringFrom findString (fromMaybe (String.length searchString) maybeStartPosition) searchString;


private inStrRevExamples =
    assert ((inStrRev "abcdefgbchijk" "bc" Nothing Nothing) == 7) &&
    assert ((inStrRev "abcdefgbchijk" "bc" (Just 0) Nothing) == -1) &&
    assert ((inStrRev "abcdefgbchijk" "bc" (Just 2) Nothing) == 1) &&
    assert ((inStrRev "abcdefgbchijk" "bc" (Just 9) Nothing) == 7) &&
    assert ((inStrRev "abcdefgbchijk" "BC" Nothing (Just True)) == 7) &&
    assert ((inStrRev "aBCdefgbchijk" "BC" Nothing (Just False)) == 1) &&
    assert ((inStrRev "abc" "" Nothing Nothing) == 3)
    ;     

ts1 = "abcde";
ts2 = "abcde";
ts3 = "ghijk";
ts4 = "abcdex";
ts5 = "abcdeghijk";
ts6 =  "ABCDE";

stringTest :: Boolean;
private stringTest =
    assert ( (subscript ts1 2) == 'c' )
    && assert ( String.length ts1 == 5 )
    && assert ( (toList ts1) == ['a', 'b', 'c', 'd', 'e'] )
    && assert ( "abcde" == (fromList ['a', 'b', 'c', 'd', 'e']) )
    && assert ( equals (ts1 ++ String.fromChar 'x') ts4 )
    && assert ( ts1 ++ ts3 == ts5 )
    && assert ( ts1 == ts2 ) 
    && assert ( not (ts1 != ts2) )
    && assert ( ts1 < ts3 )
    && assert ( not (ts1 > ts3) )
    && assert ( ts1 <= ts3 )
    && assert ( not (ts1 >= ts3) )
    && assert ( concat [ts1, ts3] == ts5 )
    && assert ( isEmpty "" )
    && assert ( not (isEmpty "ab") )
    && assert ( (toUpperCase ts1) == ts6 )
    && assert ( (toLowerCase ts6) == ts1 )
    && assert ( (substring "abcdefghij" 2 6) == "cdef" )
    && assert ( (substring "abcdefghij" 2 10) == "cdefghij" )
    && assert ( (substring "abcdefghij" 2 2) == "" )
    && assert ( (equalsIgnoreCase ts1 ts6) )
    && assert ( (indexOfStringFrom "cd" 0 "abcdeabcde") == 2 )
    && assert ( (indexOfStringFrom "cd" 3 "abcdeabcde") == 7 )
    && assert ( (lastIndexOfStringFrom "cd" 9 "abcdeabcde") == 7 )
    && assert ( (lastIndexOfStringFrom "cd" 6 "abcdeabcde") == 2 )
    && assert ( startsWith "abc" "abcdefg" )
    && assert ( endsWith  "efg" "abcdefg" )
    && assert ( (replaceAllString "abcdabcdabcd" "c" "xx") == "abxxdabxxdabxxd" ) 
    && assert ( ((toList "abc") == ['a','b','c']) )
    && assert ( ((fromList ['a','b','c']) == "abc") )    
    && assert ( (append "a" (append (space 4) "e") == "a    e") ) 
    && assert ( (subscript "paper" 0 == 'p') )
    && assert ( (String.length "" == 0) )
    && assert ( (String.length "three" == 5) )    
    ;


prop_len :: String -> String -> Boolean;
prop_len a b=
    (String.length a) + (String.length b) == String.length (append a b);

prop_startsWith :: String -> String -> Boolean;
prop_startsWith a b =
    startsWith a (append a b);

prop_endsWith :: String -> String -> Boolean;
prop_endsWith a b =
    endsWith b (append a b) ;
   
prop_toList :: String -> Boolean;
prop_toList a =
    fromList (toList a) == a;

prop_lowerUpper :: String -> Boolean;
prop_lowerUpper a =
    toLowerCase a == toLowerCase (toUpperCase a);

prop_ignoreCase :: String -> Boolean;
prop_ignoreCase a = equalsIgnoreCase (toLowerCase a) (toUpperCase a);

prop_indexOf :: String -> String -> String -> Property;
prop_indexOf a b c = 
    ((String.length b > 0) && (String.indexOfString b a == -1)) 
    `implies` 
    (String.indexOfString b (append a (append b c)) == String.length a);
   

/**
 * @return true if the testing predicates in this module all run successfully.
 */
public testModule =
    assert (quickCheck prop_len)
    && assert (quickCheck prop_startsWith)
    && assert (quickCheck prop_endsWith)
    && assert (quickCheck prop_toList)
    && assert (quickCheck prop_lowerUpper)
    && assert (quickCheck prop_ignoreCase)
    && assert (quickCheck prop_indexOf)
    && assert inStrExamples
    && assert inStrRevExamples
    && assert stringTest
    ;   
//please leave testModule last! It makes it easy to see what tests are hooked up.

