/*
 * Copyright (c) 2007 BUSINESS OBJECTS SOFTWARE LIMITED
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *  
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *  
 *     * Neither the name of Business Objects nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *  
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */


/*
 * Functor_Tests.cal
 * Creation date: May 11, 2006.
 * By: Bo Ilic
 */

/**
 * Test module for the {@link typeClass = Functor@} type class.
 * In particular, this module tests higher-kinded type variables. 
 * 
 * @author Bo Ilic
 */
module Cal.Test.Core.Functor_Tests;
import Cal.Core.Prelude using
    typeConstructor = Boolean, Int, List, Long, Maybe;
    dataConstructor = Nothing, Just;
    function = assert;
    ;
import Cal.Collections.List;
import Cal.Collections.Array using
    typeConstructor = Array;
    ;
import Cal.Collections.Map using
    typeConstructor = Map;
    ;
import Cal.Collections.IntMap using
    typeConstructor = IntMap;
    ;
import Cal.Collections.LongMap using
    typeConstructor = LongMap;
    ;
import Cal.Core.String;
import Cal.Core.Functor using
    typeClass = Functor;
    function = map;
    ;

/*
 * @example
 */
mapExamples :: Boolean;
private mapExamples =
    assert
        (map (Prelude.add 2.0) [10, 20, 30]
         == [12, 22, 32])
    && assert
        (map (Prelude.add 2.0) (Array.array3 10 20 30)
         == (Array.array3 12 22 32))
    && assert
        (map (Prelude.add 3.0) Nothing 
         == Nothing)
    && assert
        (map (Prelude.add 4.0) (Just 5)
         == Just 9)    
    && assert
        (map String.toUpperCase (Map.fromList [(1 :: Int, "one"), (2, "two"), (3, "three")])
         == (Map.fromList [(1 :: Int, "ONE"), (2, "TWO"), (3, "THREE")]))
    && assert 
        (map String.toUpperCase (IntMap.fromList [(1 :: Int, "one"), (2, "two"), (3, "three")])
         == (IntMap.fromList [(1, "ONE"), (2, "TWO"), (3, "THREE")]))
    && assert
        (map String.toUpperCase (LongMap.fromList [(1 :: Long, "one"), (2, "two"), (3, "three")])
         == (LongMap.fromList [(1, "ONE"), (2, "TWO"), (3, "THREE")]))
    ;

testModule :: Boolean;
public testModule =
    assert mapExamples;    