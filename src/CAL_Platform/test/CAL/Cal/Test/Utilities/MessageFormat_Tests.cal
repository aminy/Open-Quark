/*
 * Copyright (c) 2007 BUSINESS OBJECTS SOFTWARE LIMITED
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *  
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *  
 *     * Neither the name of Business Objects nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *  
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */


/*
 * MessageFormat_Tests.cal
 * Creation date: June 6, 2006.
 * By: Joseph Wong
 */

/**
 * Tests for the {@link module=MessageFormat@} module, and also the {@link module=StringProperties@} module.
 * @author Joseph Wong
 */
module Cal.Test.Utilities.MessageFormat_Tests;

import Cal.Core.Prelude using
    function = assert, output;
    dataConstructor = True;
    ;

import Cal.Utilities.Locale;

import Cal.Utilities.StringProperties using
    function = makeStringResourceBundle, makeStringResourceBundleInLocale;
    function = bundleModuleName, bundleName, bundleExtension, bundleRequestedLocale, bundleActualLocale;
    ;

import Cal.Utilities.MessageFormat using
    function = format, format0, format1, format2, formatForArgList;
    function = formatWithPattern, formatWithPattern1, formatWithPattern2, formatWithPattern3;
    ;

import Cal.Core.Debug using
    function = show;
    ;

import Cal.Test.Utilities.MessageFormat_TestSupport using
    function =
        strings, frenchStrings,
        format2Example1, formatExample1, formatForArgListExample1,
        format2Example2, formatExample2, formatForArgListExample2,
        formatNonOverridenBooleanExample, formatOverridenBooleanExample,
        formatNonOverridenTupleExample, formatOverridenTupleExample;
    ;

////
/// Test code below
//
testFormatFallback =
    assert (format0 strings "hello" == format0 frenchStrings "hello");

testFormatWithExamples =
    assert (tripleEquals format2Example1 formatExample1 formatForArgListExample1)
    && assert (tripleEquals format2Example2 formatExample2 formatForArgListExample2);

testFormatOverride =
    assert (formatNonOverridenBooleanExample != formatOverridenBooleanExample) &&
    assert (formatNonOverridenTupleExample != formatOverridenTupleExample);

testBundle =
    assert (bundleModuleName strings == "Cal.Test.Utilities.MessageFormat_TestSupport")
    && assert (bundleName strings == "test")
    && assert (bundleExtension strings == "properties")
    && assert (bundleRequestedLocale strings == Locale.currentLocale);

testFrenchBundle =
    assert (bundleModuleName frenchStrings == "Cal.Test.Utilities.MessageFormat_TestSupport")
    && assert (bundleName frenchStrings == "test")
    && assert (bundleExtension frenchStrings == "properties")
    && assert (bundleRequestedLocale frenchStrings == Locale.canadaFrenchLocale)
    && assert (bundleActualLocale frenchStrings == Locale.frenchLocale);

testMessagePatterns =
    assert (tripleEquals
        (formatWithPattern "{0} {1} {2}" Locale.invariantLocale ("foo", 1.0, 'x'))
        (formatWithPattern3 "{0} {1} {2}" Locale.invariantLocale "foo" 1.0 'x')
        "foo 1 x")
    && assert (tripleEquals
        (formatWithPattern "{0} {2} {1}" Locale.invariantLocale ("foo", 1.0, 'x'))
        (formatWithPattern3 "{0} {2} {1}" Locale.invariantLocale "foo" 1.0 'x')
        "foo x 1")
    && assert (tripleEquals
        (formatWithPattern "{2} {1} {0}" Locale.invariantLocale ("foo", 1.0, 'x'))
        (formatWithPattern3 "{2} {1} {0}" Locale.invariantLocale "foo" 1.0 'x')
        "x 1 foo");

tripleEquals !a !b !c =
    a == b && b == c && a == c;

public testModule =
    assert testFormatFallback
    && assert testFormatWithExamples
    && assert testFormatOverride
    && assert testBundle
    && assert testFrenchBundle
    && assert testMessagePatterns;
