/*
 * Copyright (c) 2007 BUSINESS OBJECTS SOFTWARE LIMITED
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *  
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *  
 *     * Neither the name of Business Objects nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *  
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */


/*
 * Random_Tests.cal
 * Creation date: Feb 8, 2006
 * By: Bo Ilic
 */

/**
 * This module contains test cases for the {@link module = Random@} module.
 * 
 * @author Bo Ilic
 */
module Cal.Test.Utilities.Random_Tests;
import Cal.Core.Prelude using
    dataConstructor = True;
    function = assert;
    ;
import Cal.Collections.List using
    function = reverse, subscript, take;
    ;
import Cal.Utilities.Random using
    function = randomBoundedInts, randomInts;
    ;

randomIntsExamples =
    //taking 6 random ints for a fixed seed produces reproduceable results
    assert (take 6 (randomInts 2006) == [-1617952754, 894068295, 141307627, -2052857240, 579468621, 1654413411])
    //doing it again in the same session gives the same results
    && assert (take 6 (randomInts 2006) == [-1617952754, 894068295, 141307627, -2052857240, 579468621, 1654413411])
    //it doesn't matter how the elements of the result list are explored.
    && assert (reverse (take 6 (randomInts 2006)) == reverse [-1617952754, 894068295, 141307627, -2052857240, 579468621, 1654413411])
    && assert (subscript (randomInts 2006) 3 == -2052857240)
    //using a different seed produces a different list
    && assert (take 6 (randomInts 2003) == [-1616798508, 1722581863, -2043255285, 510019565, 1821176891, 874643008])
    ;

randomBoundedIntsExamples = 
    //taking 10 random bounded ints for a fixed seed produces reproduceable results
    assert (take 10 (randomBoundedInts 1967 21) == [6, 19, 6, 8, 13, 12, 4, 4, 5, 16])
    //doing it again in the same session gives the same results
    && assert (take 10 (randomBoundedInts 1967 21) == [6, 19, 6, 8, 13, 12, 4, 4, 5, 16])   
    //it doesn't matter how the elements of the result list are explored.
    && assert (reverse (take 10 (randomBoundedInts 1967 21)) == reverse [6, 19, 6, 8, 13, 12, 4, 4, 5, 16])
    && assert (subscript (randomBoundedInts 1967 21) 5 == 12)    
    //using a different seed produces a different list
    && assert (take 6 (randomBoundedInts 2020 21) == [1, 5, 18, 10, 16, 18])    
    ;
    
    
/**
 * @return {@link True@} if the testing predicates in this module all run successfully.
 */
public testModule =    
    assert randomIntsExamples
    && assert randomBoundedIntsExamples
    ;
//please leave testModule last! Also sort the tests. It makes it easy to see what tests are hooked up.
    