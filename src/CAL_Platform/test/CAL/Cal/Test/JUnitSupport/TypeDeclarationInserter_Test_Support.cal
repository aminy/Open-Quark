/*
 * Copyright (c) 2007 BUSINESS OBJECTS SOFTWARE LIMITED
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *  
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *  
 *     * Neither the name of Business Objects nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *  
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */


/*
 * TypeDeclarationInserter_Test_Support.cal
 * Creation date: Feb 22/2006
 * By: James Wright
 */

/**
 * This is a support file for the TypeDeclarationInserter_Test suite of JUnit tests
 * (org.openquark.cal.compiler.TypeDeclarationInserter_Test)
 * 
 * The JUnit tests expect this module to have certain contents; if you change
 * the module, you may need to change the tests as well, and vice versa. 
 * 
 * @author James Wright
 */
////////////////////////////////////////////////
module Cal.Test.JUnitSupport.TypeDeclarationInserter_Test_Support;
import Cal.Core.Prelude using
    typeClass = Num;
    typeConstructor = Double, Int, Maybe;
    dataConstructor = Just;
    function = toDouble;
    ;

// accepts a record and returns a numeric type
acceptRecordReturnNum !r =
    case r of
    {a | foo} -> foo + 5;
    ;

    // funnily-indented
    // accepts a two-argument function and returns the result of applying it to two arguments
    accept2ArgFunction f x y =
        f x y;
    
acceptTupleReturnInt tuple =
    case tuple of
    (_, x) -> x + 5 :: Int;
    ;
    
overloaded = 1.2;

topLevelAcceptsIntsReturnsDouble :: Int -> Int -> Double;
private topLevelAcceptsIntsReturnsDouble !m !n =
    let
        overloaded = m + n + (1 :: Int);
    in
        Prelude.toDouble overloaded;
    
topLevelAcceptsNumsReturnsDouble :: Num a => a -> a -> Double;
private topLevelAcceptsNumsReturnsDouble !m !n =
    let
        localDouble = 5.0;
        overloaded = m + n;
    in
        (Prelude.toDouble overloaded) + localDouble;
    
topLevelAcceptDeclaredIntsReturnsDouble :: Int -> Int -> Double;
topLevelAcceptDeclaredIntsReturnsDouble !m !n =
    let
        overloaded = m + n;
    in
        toDouble overloaded;
    
tupleMaker :: Num a => a -> b -> Int -> Prelude.String -> (a, b, Int, Prelude.String);
tupleMaker w x y z =
    let
        overloaded = w + 10;
        arg1 = overloaded;
    in
        let
            arg2 = overloaded;
            overloaded = x;
        in
            let
                overloaded = y * 10;
                arg3 = overloaded;
            in
                let
                    arg4 = overloaded z;
                    overloaded x = z ++ x;
                in
                    (arg1, arg2, arg3, arg4);
           
nestedGenericVars x =
    let
        constString = "hello";
        nested1 y =
            let
                nested2 = x + y;
            in
                nested2;
    in
        (nested1 (x + 2), constString);

usesLambdas = 
    let
        localLambda list = (\ x -> x) list;
        otherLocal = 55 * 10.0;
    in
        localLambda [otherLocal];
    
usesDataconsSelection = 
    let
        stripJust x = x.Just.value;
        otherLocal = Just 'c';
    in
        stripJust otherLocal;
    
usesRecordSelection =
    let
        stripJob x = x.job;
        otherLocal = {job = "jaerb", five = 5 :: Int};
    in
        stripJob otherLocal;
    
nestedLocalsFirst = 
    let
        blah1 =
            let
                nestedId = "MASHED POTATO";
            in
                nestedId;
        blah2 =
            let
                nestedId = 5.0;
            in
                nestedId + 10;
        nestedId = 'c';
    in
        blah2;
    
wrapRecord r =
    let
        wrappedRecord = 
            if r.shouldWrap then
                [r]
            else
                [];
    in
        wrappedRecord;
