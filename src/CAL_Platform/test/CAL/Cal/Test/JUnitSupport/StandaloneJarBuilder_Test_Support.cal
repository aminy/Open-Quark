/*
 * Copyright (c) 2007 BUSINESS OBJECTS SOFTWARE LIMITED
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *  
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *  
 *     * Neither the name of Business Objects nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *  
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * StandaloneJarBuilder_Test_Support.cal
 * Creation date: June 4, 2007.
 * By: Joseph Wong
 */

/**
 * This is a module for testing the functionality of the StandaloneJarBuilder.
 */
module Cal.Test.JUnitSupport.StandaloneJarBuilder_Test_Support;

import Cal.Core.Prelude using
    typeConstructor = Boolean, String;
    function = isEmpty, undefined;
    dataConstructor = True;
    ;

import Cal.Core.Debug;

// Foreign imports for System.out.println()
data foreign unsafe import jvm "java.io.PrintStream" private JPrintStream;
foreign unsafe import jvm "static field java.lang.System.out" private stdout :: JPrintStream;
foreign unsafe import jvm "method println" private printLn :: JPrintStream -> String -> ();
foreign unsafe import jvm "method println" private printLn_Boolean :: JPrintStream -> Boolean -> ();

/**
 * Helper function for creating a {@code main@} function from a {@link Boolean@} value.
 * 
 * @arg booleanValue the value to be evaluated.
 * @arg args the argument list for the main function.
 */
makeMain :: Boolean -> [String] -> ();
public makeMain !booleanValue args =
    printLn_Boolean stdout booleanValue;

/** An entry point with a non-strict {@code [String]@} argument. */
lazyArgs :: [String] -> ();
public lazyArgs args = printLn stdout "Hello World";

/** An alias of the entry point {@link lazyArgs@}. */
aliasLazyArgs :: [String] -> ();
public aliasLazyArgs = lazyArgs;

/** An alias of another alias of the entry point {@link lazyArgs@}. */
aliasAliasLazyArgs :: [String] -> ();
public aliasAliasLazyArgs = aliasLazyArgs;

/** An alias of the entry point {@link aliasAliasLazyArgs@}. */
aliasAliasAliasLazyArgs :: [String] -> ();
public aliasAliasAliasLazyArgs = aliasAliasLazyArgs;

/** An entry point with a strict {@code [String]@} argument. */
strictArgs :: [String] -> ();
public strictArgs !args = printLn stdout "Hello World";

/** An alias of the entry point {@link strictArgs@}. */
aliasStrictArgs :: [String] -> ();
public aliasStrictArgs = strictArgs;

/** An entry point that is a CAF. */
cafEntryPoint :: [String] -> ();
public cafEntryPoint = makeMain True;

/** An alias of the entry point {@link cafEntryPoint@}. */
aliasCafEntryPoint :: [String] -> ();
public aliasCafEntryPoint = cafEntryPoint;

/** An entry point that is mutually recursive. */
mutualRecursion1 :: [String] -> ();
public mutualRecursion1 !args =
    if isEmpty args then
        printLn stdout "Hello World"
    else
        mutualRecursion2
    ;

/** Helper function for {@link mutualRecursion1@}. */
mutualRecursion2 :: ();
private mutualRecursion2 = mutualRecursion3 [];

/** Helper function for {@link mutualRecursion1@}. */
mutualRecursion3 :: [String] -> ();
private mutualRecursion3 args =
    if isEmpty args then
        mutualRecursion1 args
    else
        mutualRecursion2
    ;

/** An alias of the entry point {@link mutualRecursion1@}. */
aliasMutualRecursion1 :: [String] -> ();
public aliasMutualRecursion1 = mutualRecursion1;

/** An alias of the entry point {@link mutualRecursion3@}. */
aliasMutualRecursion3 :: [String] -> ();
public aliasMutualRecursion3 = mutualRecursion3;

/** An entry point that is a CAF and is mutually recursive. */
cafMutualRecursion1 :: [String] -> ();
public cafMutualRecursion1 =
    if isEmpty ([] :: [String]) then
        \args ->
            if isEmpty args then
                printLn stdout "Hello World"
            else
                cafMutualRecursion2
    else
        undefined
    ;

/** Helper function for {@link cafMutualRecursion1@}. */
cafMutualRecursion2 :: ();
private cafMutualRecursion2 = cafMutualRecursion3 [];

/** Helper function for {@link cafMutualRecursion1@}. */
cafMutualRecursion3 :: [String] -> ();
private cafMutualRecursion3 args =
    if isEmpty args then
        cafMutualRecursion1 args
    else
        cafMutualRecursion2
    ;

/** An alias of the entry point {@link cafMutualRecursion1@}. */
aliasCafMutualRecursion1 :: [String] -> ();
public aliasCafMutualRecursion1 = cafMutualRecursion1;

/** An alias of the entry point {@link cafMutualRecursion3@}. */
aliasCafMutualRecursion3 :: [String] -> ();
public aliasCafMutualRecursion3 = cafMutualRecursion3;

/** A dummy foreign type for {@link testForeignClass@}. */
data foreign unsafe import jvm "org.openquark.cal.foreignsupport.module.StandaloneJarBuilder_Test_Support.Dummy" JDummy;

/** An entry point for testing {@link "Cal.Core.Prelude.foreignClass"@}. */
testForeignClass :: [String] -> ();
testForeignClass !args =
    printLn stdout $ Debug.show $ Prelude.typeOf (undefined :: JDummy);
